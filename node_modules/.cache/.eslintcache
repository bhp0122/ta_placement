[{"/Users/bhumipatel/workspace/dev_env/src/index.js":"1","/Users/bhumipatel/workspace/dev_env/src/reportWebVitals.js":"2","/Users/bhumipatel/workspace/dev_env/src/App.js":"3","/Users/bhumipatel/workspace/dev_env/src/components/FileInputs.js":"4","/Users/bhumipatel/workspace/dev_env/src/components/Predeterminations.js":"5","/Users/bhumipatel/workspace/dev_env/src/components/LoadingBar.js":"6","/Users/bhumipatel/workspace/dev_env/src/components/StableMarriage.js":"7","/Users/bhumipatel/workspace/dev_env/src/components/CreateEligList.js":"8","/Users/bhumipatel/workspace/dev_env/src/components/utils/PythonFunctions.js":"9","/Users/bhumipatel/workspace/dev_env/src/components/inputHandlers/InClassNeccCSV.js":"10","/Users/bhumipatel/workspace/dev_env/src/components/utils/PreprocessingFunctions.js":"11","/Users/bhumipatel/workspace/dev_env/src/components/inputHandlers/AllTAsCSV.js":"12","/Users/bhumipatel/workspace/dev_env/src/components/inputHandlers/AllClassesCSV.js":"13","/Users/bhumipatel/workspace/dev_env/src/components/inputHandlers/TAListCSV.js":"14","/Users/bhumipatel/workspace/dev_env/src/components/layoutHandlers/OnlySchedLayout.js":"15","/Users/bhumipatel/workspace/dev_env/src/components/layoutHandlers/OnlyConflictsLayout.js":"16","/Users/bhumipatel/workspace/dev_env/src/components/layoutHandlers/ColbyCol.js":"17","/Users/bhumipatel/workspace/dev_env/src/components/layoutHandlers/SidebySide.js":"18"},{"size":694,"mtime":1698182844744,"results":"19","hashOfConfig":"20"},{"size":375,"mtime":1698182844745,"results":"21","hashOfConfig":"20"},{"size":1432,"mtime":1698371986603,"results":"22","hashOfConfig":"20"},{"size":5763,"mtime":1698182844685,"results":"23","hashOfConfig":"20"},{"size":3195,"mtime":1698182844686,"results":"24","hashOfConfig":"20"},{"size":738,"mtime":1698182844686,"results":"25","hashOfConfig":"20"},{"size":15205,"mtime":1698371988185,"results":"26","hashOfConfig":"20"},{"size":16880,"mtime":1698182844683,"results":"27","hashOfConfig":"20"},{"size":2196,"mtime":1698182844728,"results":"28","hashOfConfig":"20"},{"size":6272,"mtime":1698182844695,"results":"29","hashOfConfig":"20"},{"size":4153,"mtime":1698182844727,"results":"30","hashOfConfig":"20"},{"size":7664,"mtime":1698182844695,"results":"31","hashOfConfig":"20"},{"size":5275,"mtime":1698182844694,"results":"32","hashOfConfig":"20"},{"size":5008,"mtime":1698182844696,"results":"33","hashOfConfig":"20"},{"size":5842,"mtime":1698371950657,"results":"34","hashOfConfig":"20"},{"size":4907,"mtime":1698371941734,"results":"35","hashOfConfig":"20"},{"size":9618,"mtime":1698371983761,"results":"36","hashOfConfig":"20"},{"size":9557,"mtime":1698371985363,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},"1bqpc2s",{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"42"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"42"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/bhumipatel/workspace/dev_env/src/index.js",["103"],[],"import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <>\r\n      <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div class=\"container\">\r\n          <a class=\"navbar-brand\">TAPS</a>\r\n        </div>\r\n      </nav>\r\n      <App />\r\n  </>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",[],"/Users/bhumipatel/workspace/dev_env/src/reportWebVitals.js",[],[],"/Users/bhumipatel/workspace/dev_env/src/App.js",["104","105"],[],"/Users/bhumipatel/workspace/dev_env/src/components/FileInputs.js",["106","107","108"],[],"import React, { useState } from \"react\";\r\nimport AllClassesCSV from \"./inputHandlers/AllClassesCSV\";\r\nimport AllTAsCSV from \"./inputHandlers/AllTAsCSV\";\r\nimport InClassNeccCSV from \"./inputHandlers/InClassNeccCSV\";\r\nimport TAListCSV from \"./inputHandlers/TAListCSV\";\r\nimport CreateEligList from \"./CreateEligList\";\r\nimport StableMarriage from \"./StableMarriage\";\r\n\r\nfunction FileInputs(props) {\r\n/*  const [all_classes, setAllClasses] = useState([]);\r\n\r\n  function handleAllClassesUpdate(updatedClasses) {\r\n    setAllClasses(updatedClasses);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <AllClassesCSV />\r\n      <InClassNeccCSV />\r\n      <AllTAsCSV />\r\n    </Container>\r\n  );\r\n}*/\r\n  const [all_classes, setAllClasses] = useState([]);\r\n  const [inClassNeccData, setInClassNeccData] = useState({});\r\n  const [fileUploaded, setFileUploaded] = useState(false);\r\n  const [fileUploaded2, setFileUploaded2] = useState(false);\r\n  const [fileUploaded3, setFileUploaded3] = useState(false);\r\n  const [fileUploaded4, setFileUploaded4] = useState(false);\r\n  const [tas, setTAs] = useState([]);\r\n  const [all_classes_attend, setAllClassesAttend] = useState([]);\r\n  const {all_TAs, setAllTas, classList, setClassList, setRunAlg} = props;\r\n  \r\n\r\n\r\n\r\n\r\n  return (\r\n        <div style={{ width:'100%', justifyContent: 'center' }}>\r\n        <AllClassesCSV all_classes={all_classes} setAllClasses={setAllClasses} fileUploaded={fileUploaded} setFileUploaded={setFileUploaded} />\r\n        {!fileUploaded &&\r\n          <div class=\"max-w-sm rounded overflow-hidden shadow-lg input-card\">\r\n              <input\r\n              class=\"block w-full min-w-0 flex-auto rounded border border-solid border-neutral-300 bg-clip-padding py-[0.32rem] px-3 text-base font-normal text-neutral-700 transition duration-300 ease-in-out file:-mx-3 file:-my-[0.32rem] file:overflow-hidden file:rounded-none file:border-0 file:border-solid file:border-inherit file:bg-neutral-100 file:px-3 file:py-[0.32rem]  file:transition file:duration-150 file:ease-in-out file:[margin-inline-end:0.75rem] file:[border-inline-end-width:1px] hover:file:bg-neutral-200  focus:text-neutral-700 focus:outline-none\"\r\n              type=\"file\"\r\n              id=\"formFile\"\r\n              accept=\".csv\" \r\n              disabled={true}  />\r\n              <div style={{color:'gray'}} class=\"px-6 py-4\">\r\n                  <div class=\"font-bold text-xl mb-2\">Required Attendance</div>\r\n                  <p class=\"text-gray-700 text-base\">\r\n                  Upload Required Attendance file which contains the following columns:\r\n                  </p>\r\n              </div>\r\n          </div>\r\n        }\r\n        {fileUploaded && <InClassNeccCSV all_classes_attend={all_classes_attend} setAllClassesAttend={setAllClassesAttend} all_classes={all_classes} fileUploaded2={fileUploaded2} setFileUploaded2={setFileUploaded2}/>} \r\n        {!fileUploaded2 && \r\n          <div class=\"max-w-sm rounded overflow-hidden shadow-lg input-card\">\r\n              <input\r\n              class=\"block w-full min-w-0 flex-auto rounded border border-solid border-neutral-300 bg-clip-padding py-[0.32rem] px-3 text-base font-normal text-neutral-700 transition duration-300 ease-in-out file:-mx-3 file:-my-[0.32rem] file:overflow-hidden file:rounded-none file:border-0 file:border-solid file:border-inherit file:bg-neutral-100 file:px-3 file:py-[0.32rem]  file:transition file:duration-150 file:ease-in-out file:[margin-inline-end:0.75rem] file:[border-inline-end-width:1px] hover:file:bg-neutral-200  focus:text-neutral-700 focus:outline-none\"\r\n              type=\"file\"\r\n              id=\"formFile\"\r\n              accept=\".csv\" \r\n              disabled={true}  />\r\n\r\n              <div style={{color:'gray'}} class=\"px-6 py-4\">\r\n                  <div class=\"font-bold text-xl mb-2\">TA List</div>\r\n                  <p class=\"text-gray-700 text-base\">\r\n                  Upload List of TAs and their Total TA Hours which contains the following columns:\r\n                  </p>\r\n              </div>\r\n            </div>\r\n          }\r\n        {fileUploaded2 && <TAListCSV tas={tas} setTAs={setTAs} fileUploaded3={fileUploaded3} setFileUploaded3={setFileUploaded3} />}\r\n        {!fileUploaded3 &&\r\n          <div class=\"max-w-sm rounded overflow-hidden shadow-lg input-card\">\r\n            <input\r\n            class=\"block w-full min-w-0 flex-auto rounded border border-solid border-neutral-300 bg-clip-padding py-[0.32rem] px-3 text-base font-normal text-neutral-700 transition duration-300 ease-in-out file:-mx-3 file:-my-[0.32rem] file:overflow-hidden file:rounded-none file:border-0 file:border-solid file:border-inherit file:bg-neutral-100 file:px-3 file:py-[0.32rem]  file:transition file:duration-150 file:ease-in-out file:[margin-inline-end:0.75rem] file:[border-inline-end-width:1px] hover:file:bg-neutral-200  focus:text-neutral-700 focus:outline-none\"\r\n            type=\"file\"\r\n            id=\"formFile\"\r\n            accept=\".csv\" \r\n            disabled={true}  />\r\n\r\n            <div style={{color:'gray'}} class=\"px-6 py-4\">\r\n                <div class=\"font-bold text-xl mb-2\">Student/TA Schedules and Enrollment</div>\r\n                <p class=\"text-gray-700 text-base\">\r\n                Upload List of TAs enrollment history with their grades which contains the following columns:\r\n                </p>\r\n            </div>\r\n          </div>\r\n        }\r\n        {fileUploaded3 && <AllTAsCSV setAllTas={setAllTas} tas={tas} fileUploaded4={fileUploaded4} setFileUploaded4={setFileUploaded4} />}\r\n        {fileUploaded4 && <CreateEligList setRunAlg={setRunAlg} all_TAs={all_TAs} all_classes_attend={all_classes_attend} classList={classList} setClassList={setClassList} />}\r\n      </div>\r\n\r\n  );\r\n}\r\n\r\n\r\nexport default FileInputs;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","/Users/bhumipatel/workspace/dev_env/src/components/Predeterminations.js",["109","110","111","112"],[],"import { useState } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\n\r\nfunction Predeterminations(props){\r\n\r\n\tconst {courses, tas, setpredet, setRunAlg, setPredeterminations} = props\r\n\r\n\tconst course_array = courses.map(item => item.CRN).sort((a, b) => a-b);\r\n\tconst ta_array = tas.map(item => item.uuid)\r\n\tconst [count, setCount] = useState(1)\r\n\tconst predeterminations = []\r\n\r\n\r\n\tfunction handleTA(event) {\r\n\t\tconst id = Number(event.target.id.replace(/\\D/g, ''))\r\n\t\tconst parent = event.target.parentElement\r\n\t\t// if change newest selection row; dont add more if changing previous dropdowns\r\n\t\tif(count == (id+1) && (parent.querySelector('#ta' + id).value != 0 && parent.querySelector('#course' + id).value != 0 ))\r\n\t\t\tparent.querySelector('#hours'+id).style.visibility='visible'\r\n\t}\r\n\r\n\tfunction allotHours(event) {\r\n\t\tconst id = Number(event.target.id.replace(/\\D/g, ''))\r\n\t\t// if change newest selection row; dont add more if changing previous dropdowns\r\n\t\tif(count == (id+1)){\r\n\t\t\tsetCount(count + 1)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction enter(event) {\r\n\t\tsetpredet(false)\r\n\t\twindow.alert(\"The Algoirthm Could Take a Couple Minutes\")\r\n\t\tconst parent = event.target.parentElement.parentElement\r\n\t\tfor (var i = 0; i < count-1; i++){\r\n\t\t\tpredeterminations.push([[parent.querySelector('#course'+i).value, parent.querySelector('#ta'+i).value], Number(parent.querySelector('#hours'+i).value)])\r\n\t\t}\r\n\t\tsetPredeterminations(predeterminations)\r\n\t\tconsole.log(predeterminations)\r\n\t\tsetRunAlg(true)\r\n\t}\r\n\r\n\r\n\r\n\tfunction prereq_select(id){\r\n\r\n\r\n\t\treturn\t<div id={'predeter'+id} style={{display:'flex', justifyContent: 'space-evenly', margin:'5px'}}>\r\n\t\t\t<select id={'course'+id} className='form-select' style={{width:'20%', float:'left'}} onChange={handleTA}>\r\n\t\t\t\t<option value={0}>--- Course by CRN ---</option>\r\n\t\t\t\t{course_array.map(course => <option value={course}>{course}</option>)}\r\n\t\t\t</select>\r\n\t\t\t\r\n\t\t\t<select id={'ta'+id} className='form-select' onChange={handleTA} style={{width:'20%', float:'left'}}>\r\n\t\t\t\t<option value={0}>--- TA by UUID ---</option>\r\n\t\t\t\t{ta_array.map(ta => <option value={ta}>{tas.find(t => t.uuid === ta).firstName + \" \" + tas.find(t => t.uuid === ta).lastName }: {tas.find(t => t.uuid === ta).taHours} </option>)}\r\n\t\t\t</select>\r\n\r\n\t\t\t<select id={'hours'+id} onChange={allotHours} className='form-select' style={{width:'20%', float:'left', visibility:'hidden'}}>\r\n\t\t\t\t<option key='Default' value={0}>--- Allot Hours ---</option>\r\n\t\t\t\t<option key={5} value={5}>5 hours</option>\r\n\t\t\t\t<option key={10} value={10}>10 hours</option>\r\n\t\t\t\t<option key={15} value={15}>15 hours</option>\r\n\t\t\t\t<option key={20} value={20}>20 hours</option>\r\n\t\t\t</select>\r\n\t\t</div>\r\n\r\n\t} \r\n\r\n\r\n\treturn (\r\n\r\n\t\t<div className='border' tyle={{width:'80%' , justifyContent:'center'}}>\r\n\t\t\t<h1 style={{textAlign:'center' }}> Pre Determinations </h1>\r\n\r\n\t\t\t{[...Array(count)].map((value, index) => (\r\n\t\t\t\tprereq_select(index)\r\n\t\t\t))}\r\n\r\n\t\t\t<div className='border' style={{ display:'flex', justifyContent: 'space-evenly', margin:'2vh'}}>\r\n\t\t\t\t<button onClick={enter} type='button' className='btn btn-primary'>Make Assignments</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\n\r\n\r\nexport default Predeterminations;","/Users/bhumipatel/workspace/dev_env/src/components/LoadingBar.js",["113","114"],[],"import React, { useState, useEffect } from 'react';\r\n\r\nconst LoadingBar = (props) => {\r\n  const {progress} = props\r\n\r\n//   useEffect(() => {\r\n//     // Simulating loading progress with a timer\r\n//     const timer = setInterval(() => {\r\n//       setProgress((prevProgress) => {\r\n//         if (prevProgress >= 100) {\r\n//           clearInterval(timer);\r\n//           return 100;\r\n//         }\r\n//         return prevProgress + 10;\r\n//       });\r\n//     }, 1000);\r\n\r\n//     return () => {\r\n//       clearInterval(timer);\r\n//     };\r\n//   }, []);\r\n\r\n  return (\r\n    <div className=\"loading-bar\">\r\n\t\t<h1>progress</h1>\r\n    \t<div className=\"progress\" style={{ width: `${progress}%` }}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingBar;","/Users/bhumipatel/workspace/dev_env/src/components/StableMarriage.js",["115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133"],[],"/Users/bhumipatel/workspace/dev_env/src/components/CreateEligList.js",["134","135","136","137","138","139","140","141","142"],[],"import { useState, useEffect } from \"react\";\r\nimport StableMarriage from \"./StableMarriage\";\r\n\r\n\r\n\r\nfunction CreateEligList(props){\r\n\r\n    const [all_eligible_classes, setAllEligibleClasses] = useState([]);\r\n\r\n    const { setRunAlg, all_classes_attend, all_TAs, classList, setClassList }  = props;\r\n\r\n    const year = \"2023\"; // need to make this user input at some point\r\n\r\n    const semester = \"Spring\";\r\n\r\n    const QUALIFIED_COURSES = {\r\n        1900: [1900, 3115, 3825, 4030, 4040, 4081, 4118, 4151, 4270, 4272, 4302, 4310, 4410, 4420, 4430, 4601, 4720, 4745, 4882, 6010, 6030, 6040, 6118, 6270, 6272, 6302, 6410, 7012, 7081, 7085, 7087, 7115, 7116, 7118, 7120, 7125, 7130, 7150, 7212, 7282, 7290, 7295, 7311, 7313, 7327, 7514, 7612, 7712, 7713, 7720, 7740, 7745, 7760, 7770, 7780, 7991, 7992, 7998, 7999, 8012, 8081, 8085, 8087, 8120, 8125, 8130, 8150, 8212, 8282, 8290, 8295, 8311, 8313, 8327, 8514, 8612, 8712, 8713, 8720, 8740, 8745, 8760, 8770, 8780, 8991, 8992, 8998, 8999],\r\n        3115: [3115, 7115, 8115, 7116, 8116],\r\n        3825: [3825, 7120, 8120, 7311, 8311, 7313, 8313],\r\n        4030: [4030, 6030, 7295, 8295, 7712, 8712, 7713, 8713, 7992, 8992],\r\n        4040: [4040, 6040, 7085, 8085, 7087, 8087],\r\n        4081: [4081, 7012, 8012, 7081, 8081],\r\n        4118: [4118, 6118, 7118, 8118],\r\n        4151: [4151, 7150, 8150],\r\n        4270: [4270, 6270, 7212, 8212, 7720, 8720],\r\n        4272: [4272, 6272, 7212, 8212],\r\n        4302: [4302, 6302, 7311, 8311],\r\n        4310: [4310, 7311, 8311],\r\n        4410: [4410, 6410, 7120, 8120, 7327, 8327, 7998, 8998],\r\n        4420: [4420, 7120, 8120, 7327, 8327, 7998, 8998],\r\n        4430: [4430, 7125, 8125],\r\n        4601: [4601, 7290, 8290, 7612, 8612, 7992, 8992],\r\n        4720: [4720, 7282, 8282, 7720, 8720, 7760, 8760, 7770, 8770],\r\n        4745: [4745, 7740, 8740, 7745, 8745],\r\n        4882: [4882, 7012, 8012, 7081, 8081, 7087, 8087],\r\n        6030: [7712, 7295, 7713, 7992, 8295, 8712, 8713, 8992 ],\r\n        6118: [7118, 8118],\r\n        6430: [8125, 8125],\r\n        7012: [7012, 8012],\r\n        7081: [7081, 8081],\r\n        7085: [7085, 8085],\r\n        7087: [7087, 8087],\r\n        7115: [7115, 8115],\r\n        7116: [7116, 8116],\r\n        7118: [7118, 8118],\r\n        7120: [7120, 8120],\r\n        7125: [7125, 8125],\r\n        7130: [7130, 8130],\r\n        7150: [7150, 8150],\r\n        7212: [7212, 8212],\r\n        7282: [7282, 8282],\r\n        7290: [7290, 8290],\r\n        7295: [7295, 8295],\r\n        7311: [7311, 8311],\r\n        7313: [7313, 8313],\r\n        7327: [7327, 8327],\r\n        7514: [7514, 8514],\r\n        7612: [7612, 8612],\r\n        7712: [7712, 8712],\r\n        7713: [7713, 8713],\r\n        7720: [7720, 8720],\r\n        7740: [7740, 8740],\r\n        7745: [7745, 8745],\r\n        7760: [7760, 8760],\r\n        7770: [7770, 8770],\r\n        7780: [7780, 8780],\r\n        7991: [7991, 8991],\r\n        7992: [7992, 8992],\r\n        7998: [7998, 8998],\r\n        7999: [7999, 8999],\r\n      };\r\n\r\n        //change times in all classes list to military time to match times in all\r\n        //TAs schedules\r\n        function convertStandardTimes(timeString){\r\n            var timeArr = timeString.split(/:|\\s/);\r\n            var hours = parseInt(timeArr[0]);\r\n            var minutes = parseInt(timeArr[1]);\r\n            var amPm = timeArr[2].toLowerCase();\r\n\r\n              // Convert hours to military time\r\n            if (hours < 12 && amPm === \"pm\") {\r\n                hours += 12;\r\n            } else if (hours === 12 && amPm === \"am\") {\r\n                hours -= 12;\r\n            }\r\n\r\n            // Convert military time to string\r\n            var militaryHours = hours.toString();\r\n            var militaryMinutes = minutes.toString();\r\n            if (hours < 10) {\r\n                militaryHours = \"0\" + militaryHours;\r\n            }\r\n            if (minutes < 10) {\r\n                militaryMinutes = \"0\" + militaryMinutes;\r\n            }\r\n            var militaryTimeString = militaryHours + \"\" + militaryMinutes;\r\n\r\n            return militaryTimeString;\r\n            \r\n        }\r\n    \r\n    // Pushes the TA's eligibilty status to the class list (including a reason if they are not eligible)\r\n    function pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, is_able, reasons) {\r\n        let rowData = {\r\n            CRN: curCRN,\r\n            course_number: curCrse,\r\n            taHours: taHours,\r\n            totalEnrolled: enrollment,\r\n            TAID: curTAID,\r\n            reason: reasons,\r\n            able: is_able,\r\n        };\r\n\r\n        // check if this CRN already has a row\r\n        let existingRow = class_list.find((r) => {\r\n            return (\r\n                r.CRN == \"\" + rowData.CRN\r\n            );\r\n        });\r\n\r\n        // if CRN already has row, add TA to list\r\n        if (existingRow) {\r\n\r\n            if (!existingRow.teacher_assistants.some((ta) => ta.TAID == rowData.TAID)){\r\n\r\n                if (is_able) {\r\n                    existingRow.teacher_assistants.push({\r\n                        TAID: rowData.TAID,\r\n                        able: true,\r\n                        \r\n                        able_map: rowData.TAID\r\n                    });\r\n                }\r\n                else {\r\n                    existingRow.teacher_assistants.push({\r\n                        TAID: rowData.TAID,\r\n                        able: false,\r\n                        \r\n                        reason: rowData.reason\r\n                    });\r\n                }\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        // Create new row for CRN if no row already exists for it\r\n        let newRow\r\n\r\n        if (is_able) {\r\n            newRow = {\r\n                CRN: rowData.CRN,\r\n                course_number: rowData.course_number,\r\n                taHours: taHours,\r\n                totalEnrolled: enrollment,\r\n                teacher_assistants: [\r\n                    {\r\n                        TAID: rowData.TAID,\r\n                        able: true,\r\n\r\n                        able_map: rowData.TAID,\r\n                    },\r\n                ],\r\n            };\r\n        }\r\n        else {\r\n            newRow = {\r\n                CRN: rowData.CRN,\r\n                course_number: rowData.course_number,\r\n                taHours: taHours,\r\n                totalEnrolled: enrollment,\r\n                teacher_assistants: [\r\n                    {\r\n                        TAID: rowData.TAID,\r\n                        able: false,\r\n                        reason: rowData.reason\r\n                    },\r\n                ],\r\n            };\r\n        }\r\n        \r\n        class_list.push(newRow);\r\n    };\r\n\r\n\r\n    function handleEligibilityList(){\r\n      const class_list = [];\r\n\r\n\r\n    for (let i = 0; i < all_classes_attend.length; i++){\r\n\r\n        const curCRN = all_classes_attend[i].CRN; // current class being checked CRN\r\n        const curCrse = all_classes_attend[i].crse; //current class being checked Course Number\r\n        const taHours = all_classes_attend[i].totalTAHours; // number of hours this class is good for\r\n        const enrollment = all_classes_attend[i].totalEnrolled; // total number of students enrolled in class\r\n\r\n        const inClassNeeded = all_classes_attend[i].required_attendance; // checks if current class requries TA to be in attendance\r\n        const curClassDays = all_classes_attend[i].days //checks what days the class takes place\r\n\r\n        \r\n\r\n\r\n        var curStartTime = 0;\r\n        var curEndTime = 0;\r\n\r\n\r\n       \r\n        const curTime = all_classes_attend[i].time; // checks the time of current class that is being checked\r\n\r\n        if (curTime.includes(\"am\") || curTime.includes(\"pm\")) { // convert time of class that is being offered for comparison\r\n            var timeArr = curTime.split(\"-\");\r\n            curStartTime = parseInt(convertStandardTimes(timeArr[0]))\r\n            curEndTime = parseInt(convertStandardTimes(timeArr[1]))\r\n        }\r\n\r\n        const qualifiedCourses = QUALIFIED_COURSES[curCrse]; // identify all courses that make TA eligible to teach current course that is being evaluated\r\n        //console.log(\"This is the current course:\", curCrse);\r\n\r\n        for (let j = 0; j < all_TAs.length; j++){\r\n            const curTAID = all_TAs[j].uuid;\r\n            const curTACourses = all_TAs[j].courses; // list of every class that the current TA being evaluated has taken\r\n\r\n            // Determines if the TA was already scheduled to TA\r\n\r\n\r\n            let timeEligible = true;\r\n            let courseEligible = false;\r\n            \r\n            // The TA is eligible for this course if their grade for this course is -A or higher, or they took a qualifying course with a grade of -A or higher\r\n            // So, we loop over all of the courses that the TA has been to (no matter if they have taken it or are taking it)\r\n            for (let k = 0; k < curTACourses.length; k++){\r\n                let takenCourse = curTACourses[k];\r\n                let takenCourseNumber = takenCourse.courseNumber;\r\n\r\n                let gradeEligible = (takenCourse.grade === 'A-' || takenCourse.grade === 'A' || takenCourse.grade === 'A+')\r\n\r\n                // if TA is currently taking the course, they aren't eligible\r\n                if (takenCourse.semester === semester && takenCourse.year === year){\r\n                    // This is not currently planned to have a conflict reasoning\r\n                    continue;\r\n                }\r\n\r\n                let hasTakenClass = takenCourseNumber === curCrse\r\n\r\n                // TA has taken this course in a previous semester, not current one \r\n                if (hasTakenClass && gradeEligible){\r\n                    courseEligible = true;\r\n                    continue;\r\n                }\r\n                \r\n                let hasTakenQualifiedClass = qualifiedCourses && QUALIFIED_COURSES[curCrse].includes(Number(takenCourseNumber))\r\n\r\n                // If the TA has taken a qualifying course in a previous semester\r\n                if (hasTakenQualifiedClass && gradeEligible){\r\n                    courseEligible = true;\r\n                    continue;\r\n                }\r\n\r\n                // If we get here, then \"gradeEligible\" should be false\r\n                // So, we run one more check for a course match and a qualifying course match before sending a conflict reason\r\n                if (hasTakenClass) {\r\n                    pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, `Low grade (${takenCourse.grade}) in course (COMP ${takenCourseNumber})`);\r\n                    continue;\r\n                }\r\n                if (hasTakenQualifiedClass) {\r\n                    pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, `Low grade (${takenCourse.grade}) in qualifying course (COMP ${takenCourseNumber})`)\r\n                    continue;\r\n                }\r\n\r\n                // If we get here, then the TA hasn't taken the matched course, nor any qualifying course\r\n                if (!qualifiedCourses) {\r\n                    pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, `COMP ${curCrse} not taken`);\r\n                    continue;\r\n                }\r\n                \r\n                // The COMP 1900 qualified courses list is very long\r\n                // So, if that course is what we're dealing with, we return a conflict stating that the TA has not taken a class in COMP before\r\n                if (QUALIFIED_COURSES[1900] === qualifiedCourses) {\r\n                    pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, `Not all qualified COMP 1900 classes taken`);\r\n                    continue;\r\n                }\r\n                \r\n                let unmatchedClassesReason = `COMP`\r\n                for (let index = 0; index < qualifiedCourses.length; index++) {\r\n                    let qualifedCourse = qualifiedCourses[index]\r\n                    // This is for if we're at the end of the list\r\n                    if (index + 1 === qualifiedCourses.length) {\r\n                        // This if for if there are only two items in the list\r\n                        if (index === 1) {\r\n                            unmatchedClassesReason += ` or ${qualifedCourse} not taken`;\r\n                            break;\r\n                        }\r\n                        \r\n                        unmatchedClassesReason += `, or ${qualifedCourse} not taken`;\r\n                        break;\r\n                    }\r\n                    \r\n                    // This is for if we are on the first item in the list\r\n                    if (index === 0) {\r\n                        unmatchedClassesReason += ` ${qualifedCourse}`;\r\n                        continue;\r\n                    }\r\n                    \r\n                    unmatchedClassesReason += `, ${qualifedCourse}`;\r\n                }\r\n                pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, unmatchedClassesReason);\r\n            }\r\n\r\n            if (courseEligible === true){ // if TA has taken the class or taken an eligible class\r\n                for (let x = 0; x < curTACourses.length; x++){ // iterate through each class the TA has taken\r\n                    const takingCourse = curTACourses[x];\r\n\r\n                    const daysOfTakingCourse = curTACourses[x].days\r\n\r\n                    if (takingCourse.semester === semester && takingCourse.year === year){ // if class that is being checked is happening this semester\r\n\r\n                        if (inClassNeeded == \"Y\\r\"){ //if current class requires TA to be present\r\n                            if (daysOfTakingCourse.includes(curClassDays) || curClassDays.includes(daysOfTakingCourse)){ // if current TA class and class happen on same days\r\n                                //console.log(daysOfTakingCourse, curClassDays);\r\n\r\n                                if (takingCourse.startTime != ''){\r\n                                \r\n                                    const class_TA_taking_start_time = parseInt(takingCourse.startTime); //start time of class that TA is taking current semester\r\n\r\n                                    const class_TA_taking_end_time = parseInt(takingCourse.stopTime); //stop time of class that TA is taking current semester\r\n                                    // check if current class and class that the TA is taking is overlapping in time at all\r\n                                    if ((curStartTime - class_TA_taking_start_time >= 0 && curStartTime - class_TA_taking_end_time <= 0) || (curEndTime - class_TA_taking_start_time >= 0 && curEndTime - class_TA_taking_end_time <= 0)){\r\n                                        timeEligible = false;\r\n                                    }\r\n                                    else if ((class_TA_taking_start_time - curStartTime >= 0 && class_TA_taking_start_time - curEndTime <= 0) || (class_TA_taking_end_time - curStartTime >= 0 && class_TA_taking_end_time - curEndTime <= 0)){\r\n                                        timeEligible = false;\r\n                                    }\r\n                                }\r\n                            }\r\n                        } \r\n                        else { // if TA does not need to be in class, they are timeEligible\r\n                            timeEligible = true;\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (timeEligible === false) {\r\n                pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, \"Doesn't have the time required to TA for this course\");\r\n                continue;\r\n            }\r\n            \r\n            // At this point, the TA is time eligible, and has taken the class or taken an eligible class with a high enough grade\r\n\r\n            // Since \"timeEligible\" defaults to true, if \"courseEligible\" is false, the above if statement will be skipped\r\n            // \"timeEligible\" should not default to false (the if statement below should not be removed) since a failed eligiblity check will improperly enter the above if statement\r\n            // Instead, an error ineligibly reason is given at the end of the loop\r\n            if (courseEligible === true){ \r\n                pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, true, \"not applicable; TA is eligible\");\r\n                continue;\r\n            }\r\n\r\n            // As stated above, if we get here, we don't know what happened\r\n            pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, \"TA is not eligible for an unknown reason?\");\r\n        }\r\n    }\r\n\r\n    console.log(class_list);\r\n\r\n    setClassList(class_list);\r\n\r\n\r\n}\r\n\r\nuseEffect(() => {\r\n    handleEligibilityList();\r\n    setRunAlg(true)\r\n  }, []);\r\n\r\n\r\n  return null;\r\n\r\n}\r\n\r\nexport default CreateEligList;","/Users/bhumipatel/workspace/dev_env/src/components/utils/PythonFunctions.js",[],[],"/Users/bhumipatel/workspace/dev_env/src/components/inputHandlers/InClassNeccCSV.js",["143","144","145","146","147","148","149","150","151","152"],[],"import React, { useState } from \"react\";\r\nimport AllTAsCSV from \"./AllTAsCSV\";\r\nimport CreateEligList from \"../CreateEligList\";\r\nimport TAListCSV from \"./TAListCSV\";\r\nimport '../AllClassesCSV.css';\r\n\r\nfunction InClassNeccCSV(props) {\r\n\r\n    const [showHelp, setShowHelp] = useState(false);\r\n    const [showBubble, setShowBubble] = useState(false);\r\n\r\n    const { all_classes_attended } = props;\r\n    const { setAllClassesAttend } = props;\r\n    const { all_classes } = props;\r\n    const { fileUploaded2 } = props;\r\n    const { setFileUploaded2 } = props;\r\n\r\n    //console.log(all_classes);\r\n\r\n\r\n\r\n    function handleInClassNecCSVUpload(event) {\r\n        const file = event.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.onload = handleInClassNecFileRead;\r\n        reader.readAsText(file);\r\n    }\r\n\r\n        // This function processes the contents of the CSV file\r\n        function handleInClassNecFileRead(event) {\r\n            const content = event.target.result;\r\n            const rows = content.split(\"\\n\"); // Split the CSV into rows\r\n            const headers = rows[0].split(\",\"); // Get the column headers from the first row\r\n    \r\n            //input validation\r\n            const requiredHeaders = [\r\n                \"CRN\",\r\n                \"Attend\\r\",\r\n              ];\r\n              \r\n              // Check if the CSV file contains all of the required headers\r\n              const missingHeaders = requiredHeaders.filter((header) => !headers.includes(header));\r\n              if (missingHeaders.length > 0) {\r\n                // Display an error message if the CSV file is missing required columns\r\n                alert(`The uploaded CSV file is missing the following required columns: ${missingHeaders.join(\", \")}`);\r\n                return;\r\n              }\r\n    \r\n            const CRN = headers.indexOf(\"CRN\");\r\n            const attend = headers.indexOf(\"Attend\\r\");\r\n            const extractedClasses = [];\r\n        \r\n            // Loop through each row and extract the desired columns\r\n            for (let i = 2; i < rows.length; i++) {\r\n                const row = rows[i].split(\",\");\r\n                const rowData = {\r\n                    CRN: row[CRN],\r\n                    attend: row[attend],\r\n                  };\r\n                extractedClasses.push(rowData);\r\n            }\r\n        \r\n            // Set the extracted data in state\r\n            setAllClassesAttend(extractedClasses);\r\n\r\n            mergeTwo(all_classes, extractedClasses);\r\n\r\n            }\r\n\r\n        function mergeTwo(all_classes, extractedClasses) {\r\n            //console.log(extractedClasses);\r\n            //console.log(all_classes);\r\n\r\n            for (let x = 0; x < extractedClasses.length; x++){\r\n                const lookCRN = extractedClasses[x].CRN;\r\n                //console.log(lookCRN);\r\n\r\n                const findCRN = all_classes.find((findCRN) => findCRN.CRN == lookCRN);\r\n                //console.log(\"start\", findCRN);\r\n\r\n                if (findCRN){\r\n                    findCRN.required_attendance = extractedClasses[x].attend;\r\n                }\r\n\r\n            }\r\n\r\n            setAllClassesAttend(all_classes);\r\n            setFileUploaded2(true);\r\n        }\r\n\r\n        function handleHelpIconClick() {\r\n            setShowBubble(true);\r\n          }\r\n        \r\n          function handleBubbleClick() {\r\n            setShowBubble(false); // close the bubble\r\n          }\r\n    \r\n    function handleHelpIconClick() {\r\n        setShowBubble(true);\r\n    }\r\n    \r\n    function handleBubbleClick() {\r\n        setShowBubble(false); // close the bubble\r\n    }\r\n    \r\n    return (\r\n        <div class=\"max-w-sm rounded overflow-hidden shadow-lg input-card\">\r\n                <input\r\n                class=\"block w-full min-w-0 flex-auto rounded border border-solid border-neutral-300 bg-clip-padding py-[0.32rem] px-3 text-base font-normal text-neutral-700 transition duration-300 ease-in-out file:-mx-3 file:-my-[0.32rem] file:overflow-hidden file:rounded-none file:border-0 file:border-solid file:border-inherit file:bg-neutral-100 file:px-3 file:py-[0.32rem]  file:transition file:duration-150 file:ease-in-out file:[margin-inline-end:0.75rem] file:[border-inline-end-width:1px] hover:file:bg-neutral-200  focus:text-neutral-700 focus:outline-none\"\r\n                type=\"file\"\r\n                id=\"formFile\"\r\n                accept=\".csv\" onChange={handleInClassNecCSVUpload}\r\n                disabled={fileUploaded2}  />\r\n\r\n                <button className=\"help-icon\" onClick={handleHelpIconClick} style={{ float: \"right\" }}>\r\n                        <img src=\"Help-icon.png\" alt=\"Help Icon\" width=\"25\" height=\"25\" />\r\n                </button>\r\n\r\n                {showBubble && ( // render the bubble if showBubble is true\r\n                    <div className=\"bubble\" onClick={handleBubbleClick} style={{ float: \"right\" }}>\r\n                    <div className=\"bubble-container\">\r\n                        <div className=\"bubble-text\">\r\n                        <h2>File Should Look Like This</h2>\r\n                        <p>Click anywhere on image to return</p>\r\n                        </div>\r\n                        <div className=\"bubble-image-container\">\r\n                        <img src=\"In-Class-Nec-bubble-image.png\" alt=\"Bubble Image\" />\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                )}\r\n\r\n                {!fileUploaded2 &&\r\n                <div class=\"px-6 py-4\">\r\n                    <div class=\"font-bold text-xl mb-2\">Required Attendance</div>\r\n                    <p class=\"text-gray-700 text-base\">\r\n                    Upload Required Attendance file which contains the following columns:\r\n                    </p>\r\n                </div>\r\n                }\r\n                {fileUploaded2 &&\r\n                <div style={{color:'gray'}} class=\"px-6 py-4\">\r\n                    <div class=\"font-bold text-xl mb-2\">Required Attendance</div>\r\n                    <p class=\"text-gray-700 text-base\">\r\n                    Upload Required Attendance file which contains the following columns:\r\n                    </p>\r\n                </div>\r\n                }\r\n        </div>\r\n        );\r\n            \r\n}\r\n\r\nexport default InClassNeccCSV;\r\n","/Users/bhumipatel/workspace/dev_env/src/components/utils/PreprocessingFunctions.js",["153","154","155","156","157","158","159","160","161","162"],[],"import { shuffleArray, removeItemOnce, randomOneOrMinusOne, XOR, shuffleSegment} from \"./PythonFunctions\";\r\n\r\n\r\nfunction getMeanTAHours(dic) {\r\n\r\n\t// Filter out the values that are \"0\"\r\n\tconst nonZeroValues = Object.values(dic).filter(value => Number(value) !== 0);\r\n\r\n\t// Parse the non-zero values into numbers\r\n\tconst nonZeroNumbers = nonZeroValues.map(value => Number(value));\r\n\tconst mean = nonZeroNumbers.reduce((acc, val) => acc + val, 0) / nonZeroNumbers.length;\r\n\r\n\treturn mean\r\n}\r\n\r\nfunction createCourseHierarchy(c){\r\n\t// orders course list by 1900 Labs first then inclass only then by total enrolled\r\n\tc.sort((a, b) => {\r\n\t\tif (a.course_number === '1900' && b.age === '1900') {\r\n\t\t\treturn b.totalEnrolled - a.totalEnrolled // sort by name in ascending order\r\n\t\t} else if (a.course_number === '1900') {\r\n\t\t\treturn -1; // a comes before b\r\n\t\t} else if ( b.age === '1900') {\r\n\t\t\treturn 1; // b comes before a\r\n\t\t} else if (a.inClassNeeded === \"Y\\r\" && b.age === '1900') {\r\n\t\t\treturn b.totalEnrolled - a.totalEnrolled \r\n\t\t} else if (a.inClassNeeded === \"Y\\r\") {\r\n\t\t\treturn -1;\r\n\t\t} else if (b.inClassNeeded === \"Y\\r\") {\r\n\t\t\treturn 1;\r\n\t\t} else {\r\n\t\t  return b.totalEnrolled - a.totalEnrolled; // sort by age in ascending order\r\n\t\t}\r\n\t  });\t \r\n}\r\n\r\nfunction sortTAsByHours(t) {\r\n\tt.sort((a, b) => {\r\n\t\treturn b.taHours - a.taHours\r\n\t})\r\n}\r\n\r\nfunction createTAHierarchy(c, course, tas, t){\r\n\t// orders preferred list of TAs if ta in able_ta list ranked ahead of others\r\n\t// Otherwise orders based on Even or odd in order to assign 15 hours to 15 hours or 5 to 5 or 20 to 20 and finally from highest to least\r\n\ttas.sort((a, b) => {\r\n\t\tif (c.find(item => item.CRN === course).teacher_assistants.some(item => item.able_map === a) && c.find(item => item.CRN === course).teacher_assistants.some(item => item.able_map === b)){\r\n\t\t\t// return t.find(item => item.uuid === b).taHours - t.find(item => item.uuid === a).taHours\r\n\t\t\tconst a_hours_even = t.find(item => item.uuid === a).taHours % 2 == 0\r\n\t\t\tconst b_hours_even = t.find(item => item.uuid === b).taHours % 2 == 0\r\n\t\t\tconst check_even = c.find(item => item.CRN === course).taHours % 2 == 0\r\n\t\t\tif (!XOR(a_hours_even, check_even) && !XOR(b_hours_even, check_even)){\r\n\t\t\t\treturn t.find(item => item.uuid === b).taHours - t.find(item => item.uuid === a).taHours;\r\n\t\t\t} else if(!XOR(a_hours_even, check_even)){\r\n\t\t\t\treturn -1;\r\n\t\t\t} else if (!XOR(b_hours_even, check_even)){\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn t.find(item => item.uuid === b).taHours - t.find(item => item.uuid === a).taHours;\r\n\t\t} else if (c.find(item => item.CRN === course).teacher_assistants.some(item => item.able_map === a)){\r\n\t\t\treturn -1;\r\n\t\t} else if (c.find(item => item.CRN === course).teacher_assistants.some(item => item.able_map === b)){\r\n\t\t\treturn 1;\r\n\t\t} else {\r\n\t\t\tconst a_hours_even = t.find(item => item.uuid === a).taHours % 2 == 0\r\n\t\t\tconst b_hours_even = t.find(item => item.uuid === b).taHours % 2 == 0\r\n\t\t\tconst check_even = c.find(item => item.CRN === course).taHours % 2 == 0\r\n\t\t\tif (!XOR(a_hours_even, check_even) && !XOR(b_hours_even, check_even)){\r\n\t\t\t\treturn t.find(item => item.uuid === b).taHours - t.find(item => item.uuid === a).taHours;\r\n\t\t\t} else if(!XOR(a_hours_even, check_even)){\r\n\t\t\t\treturn -1;\r\n\t\t\t} else if (!XOR(b_hours_even, check_even)){\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn t.find(item => item.uuid === b).taHours - t.find(item => item.uuid === a).taHours;\r\n\t\t}\r\n\t})\r\n\treturn tas;\r\n}\r\n\r\nfunction createCourseHierarchyForTA(ta, c, courses){\r\n\r\n\tcourses.sort((a, b) => {\r\n\t\tif (c.find(item => item.CRN === a).teacher_assistants.some(item => item.able_map === ta) && c.find(item => item.CRN === b).teacher_assistants.some(item => item.able_map === ta)){\r\n\t\t\t// if both in ta list, randomize\r\n\t\t\treturn randomOneOrMinusOne();\r\n\t\t} else if (c.find(item => item.CRN === a).teacher_assistants.some(item => item.able_map === ta)){\r\n\t\t\treturn -1;\r\n\t\t} else if (c.find(item => item.CRN === b).teacher_assistants.some(item => item.able_map === ta)){\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t})\r\n\treturn courses\r\n}\r\n\r\n\r\nexport {createCourseHierarchy, createCourseHierarchyForTA, createTAHierarchy, sortTAsByHours, getMeanTAHours}","/Users/bhumipatel/workspace/dev_env/src/components/inputHandlers/AllTAsCSV.js",["163","164","165","166"],[],"import React, { useState } from \"react\";\r\nimport CreateEligList from \"../CreateEligList\";\r\nimport '../AllClassesCSV.css';\r\n\r\nfunction AllTAsCSV(props) {\r\n\r\n    const [showHelp, setShowHelp] = useState(false);\r\n    const [showBubble, setShowBubble] = useState(false);\r\n\r\n    const { setAllTas, tas, fileUploaded4, setFileUploaded4 } = props;\r\n\r\n    // console.log(tas)\r\n\r\n    //console.log(all_classes_attend);\r\n\r\n    function handleAllTAsUpload(event) {\r\n        const file = event.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.onload = handleAllTAsFileRead;\r\n        reader.readAsText(file);\r\n      }\r\n    \r\n      // This function processes the contents of the CSV file\r\n      function handleAllTAsFileRead(event) {\r\n        const content = event.target.result;\r\n        const rows = content.split(\"\\n\"); // Split the CSV into rows\r\n        const headers = rows[0].split(\",\"); // Get the column headers from the first row\r\n\r\n        //input validation\r\n        const requiredHeaders = [\r\n            \"uuid\",\r\n            \"Last_Name\",\r\n            \"First_Name\",\r\n            \"Course_Number\",\r\n            \"Grade\",\r\n            \"Title\",\r\n            \"Days\",\r\n            \"Start_Time\",\r\n            \"Stop_Time\",\r\n          ];\r\n          \r\n          // Check if the CSV file contains all of the required headers\r\n          const missingHeaders = requiredHeaders.filter((header) => !headers.includes(header));\r\n          if (missingHeaders.length > 0) {\r\n            // Display an error message if the CSV file is missing required columns\r\n            alert(`The uploaded CSV file is missing the following required columns: ${missingHeaders.join(\", \")}`);\r\n            return;\r\n          }\r\n\r\n\r\n\r\n        const uuidIndex = headers.indexOf(\"uuid\");\r\n        const lastNameIndex = headers.indexOf(\"Last_Name\");\r\n        const firstNameIndex = headers.indexOf(\"First_Name\");\r\n        const courseNumberIndex = headers.indexOf(\"Course_Number\");\r\n        const gradeIndex = headers.indexOf(\"Grade\");\r\n        const titleIndex = headers.indexOf(\"Title\");\r\n        const daysIndex = headers.indexOf(\"Days\");\r\n        const startTimeIndex = headers.indexOf(\"Start_Time\");\r\n        const stopTimeIndex = headers.indexOf(\"Stop_Time\");\r\n        const semester = headers.indexOf(\"Semester\");\r\n        const year = headers.indexOf(\"Year\");\r\n        const extractedTAs = [];\r\n    \r\n        // Loop through each row and extract the desired columns\r\n        for (let i = 1; i < rows.length; i++) {\r\n          const row = rows[i].split(\",\");\r\n          const rowData = {\r\n            uuid: row[uuidIndex],\r\n            lastName: row[lastNameIndex],\r\n            firstName: row[firstNameIndex],\r\n            courseNumber: row[courseNumberIndex],\r\n            grade: row[gradeIndex],\r\n            title: row[titleIndex],\r\n            days: row[daysIndex],\r\n            startTime: row[startTimeIndex],\r\n            stopTime: row[stopTimeIndex],\r\n            semester: row[semester],\r\n            year: row[year],\r\n          };\r\n          let existingRow = extractedTAs.find((r) => {\r\n            return (\r\n              r.uuid === rowData.uuid &&\r\n              r.lastName === rowData.lastName &&\r\n              r.firstName === rowData.firstName\r\n            );\r\n          });\r\n    \r\n         \r\n          if (existingRow) {\r\n            // If a row already exists with the same first three columns, add the 4th-9th columns to it\r\n            existingRow.courses.push({\r\n              courseNumber: rowData.courseNumber,\r\n              grade: rowData.grade,\r\n              title: rowData.title,\r\n              days: rowData.days,\r\n              startTime: rowData.startTime,\r\n              stopTime: rowData.stopTime,\r\n              semester: rowData.semester,\r\n              year: rowData.year,\r\n            });\r\n          } else {\r\n            const taInTAList = tas.some(item => item['uuid'] === rowData.uuid)\r\n            // If a row doesn't exist yet with the same first three columns, create a new row\r\n            if (taInTAList){\r\n              const newRow = {\r\n              \r\n                uuid: rowData.uuid,\r\n                lastName: rowData.lastName,\r\n                firstName: rowData.firstName,\r\n                taHours: tas.find(item => item['uuid'] === rowData.uuid).totalTAHours,\r\n                courses: [\r\n                  {\r\n                    courseNumber: rowData.courseNumber,\r\n                    grade: rowData.grade,\r\n                    title: rowData.title,\r\n                    days: rowData.days,\r\n                    startTime: rowData.startTime,\r\n                    stopTime: rowData.stopTime,\r\n                    semester: rowData.semester,\r\n                    year: rowData.year,\r\n                  },\r\n                ],\r\n              };\r\n              extractedTAs.push(newRow);\r\n            }\r\n          }\r\n        }\r\n    \r\n        // Set the extracted data in state\r\n        setAllTas(extractedTAs);\r\n\r\n        setFileUploaded4(true);\r\n\r\n      }\r\n\r\n      function handleHelpIconClick() {\r\n        setShowBubble(true);\r\n      }\r\n    \r\n      function handleBubbleClick() {\r\n        setShowBubble(false); // close the bubble\r\n      }\r\n\r\n      \r\n      return (\r\n        <div class=\"max-w-sm rounded overflow-hidden shadow-lg input-card\">\r\n          <input\r\n          class=\"block w-full min-w-0 flex-auto rounded border border-solid border-neutral-300 bg-clip-padding py-[0.32rem] px-3 text-base font-normal text-neutral-700 transition duration-300 ease-in-out file:-mx-3 file:-my-[0.32rem] file:overflow-hidden file:rounded-none file:border-0 file:border-solid file:border-inherit file:bg-neutral-100 file:px-3 file:py-[0.32rem]  file:transition file:duration-150 file:ease-in-out file:[margin-inline-end:0.75rem] file:[border-inline-end-width:1px] hover:file:bg-neutral-200  focus:text-neutral-700 focus:outline-none\"\r\n          type=\"file\"\r\n          id=\"formFile\"\r\n          accept=\".csv\" onChange={handleAllTAsUpload}\r\n          disabled={fileUploaded4}  />\r\n\r\n          <button className=\"help-icon\" onClick={handleHelpIconClick} style={{ float: \"right\" }}>\r\n            <img src=\"Help-icon.png\" alt=\"Help Icon\" width=\"25\" height=\"25\" />\r\n          </button>\r\n          \r\n          {showBubble && ( // render the bubble if showBubble is true\r\n            <div className=\"bubble\" onClick={handleBubbleClick} style={{ float: \"right\" }}>\r\n              <div className=\"bubble-container\">\r\n                <div className=\"bubble-text\">\r\n                  <h2>File Should Look Like This</h2>\r\n                  <p>Click anywhere on image to return</p>\r\n                </div>\r\n                <div className=\"bubble-image-container\">\r\n                  <img src=\"TA-Schedule-bubble-image.png\" alt=\"Bubble Image\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {!fileUploaded4 &&\r\n          <div class=\"px-6 py-4\">\r\n              <div class=\"font-bold text-xl mb-2\">Student/TA Schedules and Enrollment</div>\r\n              <p class=\"text-gray-700 text-base\">\r\n              Upload List of TAs enrollment history with their grades which contains the following columns:\r\n              </p>\r\n          </div>\r\n          }\r\n          {fileUploaded4 &&\r\n          <div style={{color:'gray'}} class=\"px-6 py-4\">\r\n              <div class=\"font-bold text-xl mb-2\">Student/TA Schedules and Enrollment</div>\r\n              <p class=\"text-gray-700 text-base\">\r\n              Upload List of TAs enrollment history with their grades which contains the following columns:\r\n              </p>\r\n          </div>\r\n          }\r\n      </div>\r\n\r\n  );\r\n}\r\n\r\nexport default AllTAsCSV;\r\n","/Users/bhumipatel/workspace/dev_env/src/components/inputHandlers/AllClassesCSV.js",["167","168","169","170","171","172","173","174"],[],"import React, { useState } from \"react\";\r\nimport InClassNeccCSV from \"./InClassNeccCSV\";\r\nimport '../AllClassesCSV.css';\r\n\r\nfunction AllClassesCSV(props) {\r\n\r\n  const [showHelp, setShowHelp] = useState(false);\r\n  const [showBubble, setShowBubble] = useState(false);\r\n  const [fullScreenBubble, setFullScreenBubble] = useState(false);\r\n\r\n  const { all_classes, setAllClasses, fileUploaded, setFileUploaded } = props;\r\n\r\n  function handleAllClassesCSVUpload(event) {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = handleAllClassesFileRead;\r\n    reader.readAsText(file);\r\n  }\r\n\r\n  function handleAllClassesFileRead(event) {\r\n    const content = event.target.result;\r\n    const rows = content.split(\"\\n\");\r\n    const headers = rows[1].split(\",\");\r\n  \r\n\r\n    const requiredHeaders = [\r\n      \"TA\",\r\n      \"Total Enrolled\",\r\n      \"CRN\",\r\n      \"Crse\",\r\n      \"Title\",\r\n      \"Days\",\r\n      \"Time\",\r\n      \"Instructor\",\r\n    ];\r\n\r\n    const missingHeaders = requiredHeaders.filter(\r\n      (header) => !headers.includes(header)\r\n    );\r\n\r\n    if (missingHeaders.length > 0) {\r\n      alert(\r\n        `The uploaded CSV file is missing the following required columns: ${missingHeaders.join(\r\n          \", \"\r\n        )}`\r\n      );\r\n      return;\r\n    }\r\n\r\n    const totalTAHours = headers.indexOf(\"TA\");\r\n    const totalEnrolledIndex = headers.indexOf(\"Total Enrolled\");\r\n    const CRN = headers.indexOf(\"CRN\");\r\n    const crseIndex = headers.indexOf(\"Crse\");\r\n    const titleIndex = headers.indexOf(\"Title\");\r\n    const daysIndex = headers.indexOf(\"Days\");\r\n    const timeIndex = headers.indexOf(\"Time\");\r\n    const instructorIndex = headers.indexOf(\"Instructor\");\r\n    const extractedClasses = [];\r\n\r\n    for (let i = 2; i < rows.length; i++) {\r\n      const row = rows[i].split(\",\");\r\n\r\n      if (row[totalTAHours] !== \"\" && row[totalTAHours] !== \"0\" && row[CRN] != \"\") {\r\n        const rowData = {\r\n          totalTAHours: row[totalTAHours],\r\n          totalEnrolled: row[totalEnrolledIndex],\r\n          CRN: row[CRN],\r\n          crse: row[crseIndex],\r\n          title: row[titleIndex],\r\n          days: row[daysIndex],\r\n          time: row[timeIndex],\r\n          instructor: row[instructorIndex],\r\n          required_attendance: \"No Data\",\r\n        };\r\n        extractedClasses.push(rowData);\r\n      }\r\n    }\r\n    setAllClasses(extractedClasses)\r\n    setFileUploaded(true)\r\n    }\r\n\r\n    function handleHelpIconClick() {\r\n        setShowBubble(true);\r\n    }\r\n\r\n    function handleBubbleClick() {\r\n        setShowBubble(false); // close the bubble\r\n    }\r\n\r\n    return (\r\n            \r\n        <div style={{}} class=\"max-w-sm rounded overflow-hidden shadow-lg input-card\">\r\n                <input\r\n                class=\"block w-full min-w-0 flex-auto rounded border border-solid border-neutral-300 bg-clip-padding py-[0.32rem] px-3 text-base font-normal text-neutral-700 transition duration-300 ease-in-out file:-mx-3 file:-my-[0.32rem] file:overflow-hidden file:rounded-none file:border-0 file:border-solid file:border-inherit file:bg-neutral-100 file:px-3 file:py-[0.32rem]  file:transition file:duration-150 file:ease-in-out file:[margin-inline-end:0.75rem] file:[border-inline-end-width:1px] hover:file:bg-neutral-200  focus:text-neutral-700 focus:outline-none\"\r\n                type=\"file\"\r\n                id=\"formFile\"\r\n                accept=\".csv\" onChange={handleAllClassesCSVUpload}\r\n                disabled={fileUploaded}  />\r\n\r\n                <button className=\"help-icon\" onClick={handleHelpIconClick} style={{ float: \"right\" }}>\r\n                    <img src=\"Help-icon.png\" alt=\"Help Icon\" width=\"25\" height=\"25\" />\r\n                </button>\r\n                \r\n                {showBubble && ( // render the bubble if showBubble is true\r\n                    <div className=\"bubble\" onClick={handleBubbleClick} style={{ float: \"right\" }}>\r\n                    <div className=\"bubble-container\">\r\n                        <div className=\"bubble-text\">\r\n                        <h2>File Should Look Like This</h2>\r\n                        <p>Click anywhere on image to return</p>\r\n                        </div>\r\n                        <div className=\"bubble-image-container\">\r\n                        <img src=\"All-Classes-Bubble-Image.png\" alt=\"Bubble Image\" />\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                )}\r\n\r\n                {!fileUploaded &&\r\n                <div class=\"px-6 py-4\">\r\n                    <div class=\"font-bold text-xl mb-2\">All Courses Offered</div>\r\n                    <p class=\"text-gray-700 text-base\">\r\n                    Upload all courses offered file which contains the following columns:\r\n                    </p>\r\n                </div>\r\n                }\r\n                {fileUploaded &&\r\n                <div style={{color:'gray'}} class=\"px-6 py-4\">\r\n                    <div class=\"font-bold text-xl mb-2\">All Courses Offered</div>\r\n                    <p class=\"text-gray-700 text-base\">\r\n                    Upload all courses offered file which contains the following columns:\r\n                    </p>\r\n                </div>\r\n                }\r\n\r\n        </div>\r\n      )\r\n\r\n}\r\n\r\nexport default AllClassesCSV;\r\n","/Users/bhumipatel/workspace/dev_env/src/components/inputHandlers/TAListCSV.js",["175","176","177","178","179","180"],[],"import React, { useState } from \"react\";\r\nimport InClassNeccCSV from \"./InClassNeccCSV\";\r\nimport AllTAsCSV from \"./AllTAsCSV\";\r\nimport '../AllClassesCSV.css';\r\n\r\nfunction TAListCSV(props) {\r\n    const [showHelp, setShowHelp] = useState(false);\r\n    const [showBubble, setShowBubble] = useState(false);\r\n\r\n    const { tas, setTAs, fileUploaded3, setFileUploaded3 } = props;\r\n\r\n    function handleTAList(event) {\r\n        const file = event.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.onload = handleAllClassFileRead;\r\n        reader.readAsText(file);\r\n    }\r\n\r\n        // This function processes the contents of the CSV file\r\n    function handleAllClassFileRead(event) {\r\n        const content = event.target.result;\r\n        const rows = content.split(\"\\n\"); // Split the CSV into rows\r\n        const headers = rows[0].split(\",\"); // Get the column headers from the first row\r\n\r\n        //input validation\r\n        const requiredHeaders = [\r\n            \"uuid\", // Changed \r\n            \"Hours\",\r\n          ];\r\n          \r\n          // Check if the CSV file contains all of the required headers\r\n          const missingHeaders = requiredHeaders.filter((header) => !headers.includes(header));\r\n          if (missingHeaders.length > 0) {\r\n            // Display an error message if the CSV file is missing required columns\r\n            alert(`The uploaded CSV file is missing the following required columns: ${missingHeaders.join(\", \")}`);\r\n            return;\r\n          }\r\n\r\n\r\n        const totalTAHours = headers.indexOf(\"Hours\");\r\n        const uuid = headers.indexOf(\"uuid\");\r\n\r\n        const extractedTAs = [];\r\n\r\n    \r\n        // Loop through each row and extract the desired columns\r\n        for (let i = 2; i < rows.length; i++) {\r\n            const row = rows[i].split(\",\");\r\n            // Filtering out all classes we are not concerned about //\r\n\r\n            const rowData = {\r\n            totalTAHours: row[totalTAHours],\r\n            uuid: row[uuid]\r\n            };\r\n            extractedTAs.push(rowData);\r\n        \r\n        }\r\n\r\n    \r\n        // Set the extracted data in state\r\n        setTAs(extractedTAs);\r\n        setFileUploaded3(true);\r\n\r\n    }\r\n\r\n    function handleHelpIconClick() {\r\n        setShowBubble(true);\r\n    }\r\n    \r\n    function handleBubbleClick() {\r\n        setShowBubble(false); // close the bubble\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div class=\"max-w-sm rounded overflow-hidden shadow-lg input-card\">\r\n                <input\r\n                class=\"block w-full min-w-0 flex-auto rounded border border-solid border-neutral-300 bg-clip-padding py-[0.32rem] px-3 text-base font-normal text-neutral-700 transition duration-300 ease-in-out file:-mx-3 file:-my-[0.32rem] file:overflow-hidden file:rounded-none file:border-0 file:border-solid file:border-inherit file:bg-neutral-100 file:px-3 file:py-[0.32rem]  file:transition file:duration-150 file:ease-in-out file:[margin-inline-end:0.75rem] file:[border-inline-end-width:1px] hover:file:bg-neutral-200  focus:text-neutral-700 focus:outline-none\"\r\n                type=\"file\"\r\n                id=\"formFile\"\r\n                accept=\".csv\" onChange={handleTAList}\r\n                disabled={fileUploaded3}  />\r\n\r\n                <button className=\"help-icon\" onClick={handleHelpIconClick} style={{ float: \"right\" }}>\r\n                    <img src=\"Help-icon.png\" alt=\"Help Icon\" width=\"25\" height=\"25\" />\r\n                </button>\r\n                \r\n                {showBubble && ( // render the bubble if showBubble is true\r\n                    <div className=\"bubble\" onClick={handleBubbleClick} style={{ float: \"right\" }}>\r\n                    <div className=\"bubble-container\">\r\n                        <div className=\"bubble-text\">\r\n                        <h2>File Should Look Like This</h2>\r\n                        <p>Click anywhere on image to return</p>\r\n                        </div>\r\n                        <div className=\"bubble-image-container\">\r\n                        <img src=\"TA-List-bubble-image.png\" alt=\"Bubble Image\" />\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                )}\r\n\r\n\r\n                {!fileUploaded3 &&\r\n                <div class=\"px-6 py-4\">\r\n                    <div class=\"font-bold text-xl mb-2\">TA List</div>\r\n                    <p class=\"text-gray-700 text-base\">\r\n                    Upload List of TAs and their Total TA Hours which contains the following columns:\r\n                    </p>\r\n                </div>\r\n                }\r\n                {fileUploaded3 &&\r\n                <div style={{color:'gray'}} class=\"px-6 py-4\">\r\n                    <div class=\"font-bold text-xl mb-2\">TA List</div>\r\n                    <p class=\"text-gray-700 text-base\">\r\n                    Upload List of TAs and their Total TA Hours which contains the following columns:\r\n                    </p>\r\n                </div>\r\n                }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TAListCSV;\r\n","/Users/bhumipatel/workspace/dev_env/src/components/layoutHandlers/OnlySchedLayout.js",[],[],"/Users/bhumipatel/workspace/dev_env/src/components/layoutHandlers/OnlyConflictsLayout.js",[],[],"/Users/bhumipatel/workspace/dev_env/src/components/layoutHandlers/ColbyCol.js",[],[],"/Users/bhumipatel/workspace/dev_env/src/components/layoutHandlers/SidebySide.js",[],[],{"ruleId":"181","severity":1,"message":"182","line":12,"column":11,"nodeType":"183","endLine":12,"endColumn":35},{"ruleId":"184","severity":1,"message":"185","line":3,"column":8,"nodeType":"186","messageId":"187","endLine":3,"endColumn":18},{"ruleId":"184","severity":1,"message":"188","line":13,"column":10,"nodeType":"186","messageId":"187","endLine":13,"endColumn":18},{"ruleId":"184","severity":1,"message":"189","line":7,"column":8,"nodeType":"186","messageId":"187","endLine":7,"endColumn":22},{"ruleId":"184","severity":1,"message":"190","line":25,"column":10,"nodeType":"186","messageId":"187","endLine":25,"endColumn":25},{"ruleId":"184","severity":1,"message":"191","line":25,"column":27,"nodeType":"186","messageId":"187","endLine":25,"endColumn":45},{"ruleId":"192","severity":1,"message":"193","line":19,"column":12,"nodeType":"194","messageId":"195","endLine":19,"endColumn":14},{"ruleId":"192","severity":1,"message":"196","line":19,"column":65,"nodeType":"194","messageId":"195","endLine":19,"endColumn":67},{"ruleId":"192","severity":1,"message":"196","line":19,"column":116,"nodeType":"194","messageId":"195","endLine":19,"endColumn":118},{"ruleId":"192","severity":1,"message":"193","line":26,"column":12,"nodeType":"194","messageId":"195","endLine":26,"endColumn":14},{"ruleId":"184","severity":1,"message":"197","line":1,"column":17,"nodeType":"186","messageId":"187","endLine":1,"endColumn":25},{"ruleId":"184","severity":1,"message":"198","line":1,"column":27,"nodeType":"186","messageId":"187","endLine":1,"endColumn":36},{"ruleId":"184","severity":1,"message":"197","line":2,"column":10,"nodeType":"186","messageId":"187","endLine":2,"endColumn":18},{"ruleId":"184","severity":1,"message":"198","line":2,"column":20,"nodeType":"186","messageId":"187","endLine":2,"endColumn":29},{"ruleId":"184","severity":1,"message":"199","line":3,"column":10,"nodeType":"186","messageId":"187","endLine":3,"endColumn":22},{"ruleId":"184","severity":1,"message":"200","line":3,"column":40,"nodeType":"186","messageId":"187","endLine":3,"endColumn":59},{"ruleId":"184","severity":1,"message":"201","line":3,"column":61,"nodeType":"186","messageId":"187","endLine":3,"endColumn":64},{"ruleId":"184","severity":1,"message":"202","line":34,"column":7,"nodeType":"186","messageId":"187","endLine":34,"endColumn":18},{"ruleId":"203","severity":1,"message":"204","line":136,"column":8,"nodeType":"186","messageId":"205","endLine":136,"endColumn":14},{"ruleId":"203","severity":1,"message":"206","line":137,"column":8,"nodeType":"186","messageId":"205","endLine":137,"endColumn":10},{"ruleId":"203","severity":1,"message":"207","line":138,"column":8,"nodeType":"186","messageId":"205","endLine":138,"endColumn":20},{"ruleId":"203","severity":1,"message":"208","line":139,"column":8,"nodeType":"186","messageId":"205","endLine":139,"endColumn":16},{"ruleId":"203","severity":1,"message":"204","line":141,"column":8,"nodeType":"186","messageId":"205","endLine":141,"endColumn":14},{"ruleId":"203","severity":1,"message":"206","line":142,"column":8,"nodeType":"186","messageId":"205","endLine":142,"endColumn":10},{"ruleId":"203","severity":1,"message":"207","line":143,"column":8,"nodeType":"186","messageId":"205","endLine":143,"endColumn":20},{"ruleId":"203","severity":1,"message":"208","line":144,"column":8,"nodeType":"186","messageId":"205","endLine":144,"endColumn":16},{"ruleId":"192","severity":1,"message":"196","line":159,"column":21,"nodeType":"194","messageId":"195","endLine":159,"endColumn":23},{"ruleId":"209","severity":1,"message":"210","line":197,"column":48,"nodeType":"211","messageId":"212","endLine":197,"endColumn":94},{"ruleId":"209","severity":1,"message":"213","line":208,"column":21,"nodeType":"211","messageId":"212","endLine":208,"endColumn":73},{"ruleId":"209","severity":1,"message":"214","line":319,"column":59,"nodeType":"211","messageId":"212","endLine":319,"endColumn":103},{"ruleId":"184","severity":1,"message":"215","line":336,"column":10,"nodeType":"186","messageId":"187","endLine":336,"endColumn":21},{"ruleId":"184","severity":1,"message":"189","line":2,"column":8,"nodeType":"186","messageId":"187","endLine":2,"endColumn":22},{"ruleId":"184","severity":1,"message":"216","line":8,"column":12,"nodeType":"186","messageId":"187","endLine":8,"endColumn":32},{"ruleId":"184","severity":1,"message":"217","line":8,"column":34,"nodeType":"186","messageId":"187","endLine":8,"endColumn":55},{"ruleId":"184","severity":1,"message":"218","line":10,"column":53,"nodeType":"186","messageId":"187","endLine":10,"endColumn":62},{"ruleId":"192","severity":1,"message":"193","line":118,"column":23,"nodeType":"194","messageId":"195","endLine":118,"endColumn":25},{"ruleId":"192","severity":1,"message":"193","line":125,"column":70,"nodeType":"194","messageId":"195","endLine":125,"endColumn":72},{"ruleId":"192","severity":1,"message":"193","line":318,"column":43,"nodeType":"194","messageId":"195","endLine":318,"endColumn":45},{"ruleId":"192","severity":1,"message":"196","line":322,"column":60,"nodeType":"194","messageId":"195","endLine":322,"endColumn":62},{"ruleId":"219","severity":1,"message":"220","line":375,"column":6,"nodeType":"221","endLine":375,"endColumn":8,"suggestions":"222"},{"ruleId":"184","severity":1,"message":"223","line":2,"column":8,"nodeType":"186","messageId":"187","endLine":2,"endColumn":17},{"ruleId":"184","severity":1,"message":"224","line":3,"column":8,"nodeType":"186","messageId":"187","endLine":3,"endColumn":22},{"ruleId":"184","severity":1,"message":"225","line":4,"column":8,"nodeType":"186","messageId":"187","endLine":4,"endColumn":17},{"ruleId":"184","severity":1,"message":"226","line":9,"column":12,"nodeType":"186","messageId":"187","endLine":9,"endColumn":20},{"ruleId":"184","severity":1,"message":"227","line":9,"column":22,"nodeType":"186","messageId":"187","endLine":9,"endColumn":33},{"ruleId":"184","severity":1,"message":"228","line":12,"column":13,"nodeType":"186","messageId":"187","endLine":12,"endColumn":33},{"ruleId":"192","severity":1,"message":"193","line":78,"column":75,"nodeType":"194","messageId":"195","endLine":78,"endColumn":77},{"ruleId":"203","severity":1,"message":"229","line":99,"column":14,"nodeType":"186","messageId":"205","endLine":99,"endColumn":33},{"ruleId":"203","severity":1,"message":"230","line":103,"column":14,"nodeType":"186","messageId":"205","endLine":103,"endColumn":31},{"ruleId":"231","severity":1,"message":"232","line":128,"column":25,"nodeType":"183","endLine":128,"endColumn":87},{"ruleId":"184","severity":1,"message":"199","line":1,"column":10,"nodeType":"186","messageId":"187","endLine":1,"endColumn":22},{"ruleId":"184","severity":1,"message":"233","line":1,"column":24,"nodeType":"186","messageId":"187","endLine":1,"endColumn":38},{"ruleId":"184","severity":1,"message":"234","line":1,"column":66,"nodeType":"186","messageId":"187","endLine":1,"endColumn":80},{"ruleId":"192","severity":1,"message":"193","line":49,"column":69,"nodeType":"194","messageId":"195","endLine":49,"endColumn":71},{"ruleId":"192","severity":1,"message":"193","line":50,"column":69,"nodeType":"194","messageId":"195","endLine":50,"endColumn":71},{"ruleId":"192","severity":1,"message":"193","line":51,"column":71,"nodeType":"194","messageId":"195","endLine":51,"endColumn":73},{"ruleId":"192","severity":1,"message":"193","line":65,"column":69,"nodeType":"194","messageId":"195","endLine":65,"endColumn":71},{"ruleId":"192","severity":1,"message":"193","line":66,"column":69,"nodeType":"194","messageId":"195","endLine":66,"endColumn":71},{"ruleId":"192","severity":1,"message":"193","line":67,"column":71,"nodeType":"194","messageId":"195","endLine":67,"endColumn":73},{"ruleId":"235","severity":1,"message":"236","line":83,"column":22,"nodeType":"211","messageId":"237","endLine":83,"endColumn":24},{"ruleId":"184","severity":1,"message":"224","line":2,"column":8,"nodeType":"186","messageId":"187","endLine":2,"endColumn":22},{"ruleId":"184","severity":1,"message":"226","line":7,"column":12,"nodeType":"186","messageId":"187","endLine":7,"endColumn":20},{"ruleId":"184","severity":1,"message":"227","line":7,"column":22,"nodeType":"186","messageId":"187","endLine":7,"endColumn":33},{"ruleId":"231","severity":1,"message":"232","line":167,"column":19,"nodeType":"183","endLine":167,"endColumn":80},{"ruleId":"184","severity":1,"message":"238","line":2,"column":8,"nodeType":"186","messageId":"187","endLine":2,"endColumn":22},{"ruleId":"184","severity":1,"message":"226","line":7,"column":10,"nodeType":"186","messageId":"187","endLine":7,"endColumn":18},{"ruleId":"184","severity":1,"message":"227","line":7,"column":20,"nodeType":"186","messageId":"187","endLine":7,"endColumn":31},{"ruleId":"184","severity":1,"message":"239","line":9,"column":10,"nodeType":"186","messageId":"187","endLine":9,"endColumn":26},{"ruleId":"184","severity":1,"message":"240","line":9,"column":28,"nodeType":"186","messageId":"187","endLine":9,"endColumn":47},{"ruleId":"184","severity":1,"message":"241","line":11,"column":11,"nodeType":"186","messageId":"187","endLine":11,"endColumn":22},{"ruleId":"192","severity":1,"message":"196","line":63,"column":77,"nodeType":"194","messageId":"195","endLine":63,"endColumn":79},{"ruleId":"231","severity":1,"message":"232","line":112,"column":25,"nodeType":"183","endLine":112,"endColumn":86},{"ruleId":"184","severity":1,"message":"238","line":2,"column":8,"nodeType":"186","messageId":"187","endLine":2,"endColumn":22},{"ruleId":"184","severity":1,"message":"223","line":3,"column":8,"nodeType":"186","messageId":"187","endLine":3,"endColumn":17},{"ruleId":"184","severity":1,"message":"226","line":7,"column":12,"nodeType":"186","messageId":"187","endLine":7,"endColumn":20},{"ruleId":"184","severity":1,"message":"227","line":7,"column":22,"nodeType":"186","messageId":"187","endLine":7,"endColumn":33},{"ruleId":"184","severity":1,"message":"242","line":10,"column":13,"nodeType":"186","messageId":"187","endLine":10,"endColumn":16},{"ruleId":"231","severity":1,"message":"232","line":97,"column":25,"nodeType":"183","endLine":97,"endColumn":82},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'LoadingBar' is defined but never used.","Identifier","unusedVar","'progress' is assigned a value but never used.","'StableMarriage' is defined but never used.","'inClassNeccData' is assigned a value but never used.","'setInClassNeccData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'useState' is defined but never used.","'useEffect' is defined but never used.","'shuffleArray' is defined but never used.","'randomOneOrMinusOne' is defined but never used.","'XOR' is defined but never used.","'setProgress' is assigned a value but never used.","no-redeclare","'course' is already defined.","redeclared","'ta' is already defined.","'course_hours' is already defined.","'ta_hours' is already defined.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'preferred_rankings_women'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'preferred_rankings_men'.","Function declared in a loop contains unsafe references to variable(s) 'i'.","'course_name' is defined but never used.","'all_eligible_classes' is assigned a value but never used.","'setAllEligibleClasses' is assigned a value but never used.","'classList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleEligibilityList' and 'setRunAlg'. Either include them or remove the dependency array.","ArrayExpression",["243"],"'AllTAsCSV' is defined but never used.","'CreateEligList' is defined but never used.","'TAListCSV' is defined but never used.","'showHelp' is assigned a value but never used.","'setShowHelp' is assigned a value but never used.","'all_classes_attended' is assigned a value but never used.","'handleHelpIconClick' is already defined.","'handleBubbleClick' is already defined.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'removeItemOnce' is defined but never used.","'shuffleSegment' is defined but never used.","array-callback-return","Array.prototype.sort() expects a value to be returned at the end of arrow function.","expectedAtEnd","'InClassNeccCSV' is defined but never used.","'fullScreenBubble' is assigned a value but never used.","'setFullScreenBubble' is assigned a value but never used.","'all_classes' is assigned a value but never used.","'tas' is assigned a value but never used.",{"desc":"244","fix":"245"},"Update the dependencies array to be: [handleEligibilityList, setRunAlg]",{"range":"246","text":"247"},[16817,16819],"[handleEligibilityList, setRunAlg]"]