[{"/home/nellexvul/GitRepos/TABS/src/index.js":"1","/home/nellexvul/GitRepos/TABS/src/App.js":"2","/home/nellexvul/GitRepos/TABS/src/reportWebVitals.js":"3","/home/nellexvul/GitRepos/TABS/src/components/Predeterminations.js":"4","/home/nellexvul/GitRepos/TABS/src/components/LoadingBar.js":"5","/home/nellexvul/GitRepos/TABS/src/components/FileInputs.js":"6","/home/nellexvul/GitRepos/TABS/src/components/StableMarriage.js":"7","/home/nellexvul/GitRepos/TABS/src/components/CreateEligList.js":"8","/home/nellexvul/GitRepos/TABS/src/components/inputHandlers/AllClassesCSV.js":"9","/home/nellexvul/GitRepos/TABS/src/components/inputHandlers/AllTAsCSV.js":"10","/home/nellexvul/GitRepos/TABS/src/components/inputHandlers/TAListCSV.js":"11","/home/nellexvul/GitRepos/TABS/src/components/inputHandlers/InClassNeccCSV.js":"12","/home/nellexvul/GitRepos/TABS/src/components/utils/PythonFunctions.js":"13","/home/nellexvul/GitRepos/TABS/src/components/utils/PreprocessingFunctions.js":"14"},{"size":694,"mtime":1696125196665,"results":"15","hashOfConfig":"16"},{"size":1431,"mtime":1696125196665,"results":"17","hashOfConfig":"16"},{"size":375,"mtime":1696125196665,"results":"18","hashOfConfig":"16"},{"size":3195,"mtime":1696125196665,"results":"19","hashOfConfig":"16"},{"size":738,"mtime":1696125196665,"results":"20","hashOfConfig":"16"},{"size":5763,"mtime":1696125196665,"results":"21","hashOfConfig":"16"},{"size":19360,"mtime":1697838281370,"results":"22","hashOfConfig":"16"},{"size":16827,"mtime":1697851071080,"results":"23","hashOfConfig":"16"},{"size":5275,"mtime":1696125196665,"results":"24","hashOfConfig":"16"},{"size":7664,"mtime":1696125196665,"results":"25","hashOfConfig":"16"},{"size":5008,"mtime":1696125196665,"results":"26","hashOfConfig":"16"},{"size":6272,"mtime":1696125196665,"results":"27","hashOfConfig":"16"},{"size":2196,"mtime":1696125196665,"results":"28","hashOfConfig":"16"},{"size":4153,"mtime":1697838281370,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1kdwb48",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/nellexvul/GitRepos/TABS/src/index.js",["73"],[],"/home/nellexvul/GitRepos/TABS/src/App.js",["74","75"],[],"/home/nellexvul/GitRepos/TABS/src/reportWebVitals.js",[],[],"/home/nellexvul/GitRepos/TABS/src/components/Predeterminations.js",["76","77","78","79"],[],"/home/nellexvul/GitRepos/TABS/src/components/LoadingBar.js",["80","81"],[],"/home/nellexvul/GitRepos/TABS/src/components/FileInputs.js",["82","83","84"],[],"/home/nellexvul/GitRepos/TABS/src/components/StableMarriage.js",["85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103"],[],"/home/nellexvul/GitRepos/TABS/src/components/CreateEligList.js",["104","105","106","107","108","109","110","111","112"],[],"import { useState, useEffect } from \"react\";\r\nimport StableMarriage from \"./StableMarriage\";\r\n\r\n\r\n\r\nfunction CreateEligList(props){\r\n\r\n    const [all_eligible_classes, setAllEligibleClasses] = useState([]);\r\n\r\n    const { setRunAlg, all_classes_attend, all_TAs, classList, setClassList }  = props;\r\n\r\n    const year = \"2023\"; // need to make this user input at some point\r\n\r\n    const semester = \"Spring\";\r\n\r\n    const QUALIFIED_COURSES = {\r\n        1900: [1900, 3115, 3825, 4030, 4040, 4081, 4118, 4151, 4270, 4272, 4302, 4310, 4410, 4420, 4430, 4601, 4720, 4745, 4882, 6010, 6030, 6040, 6118, 6270, 6272, 6302, 6410, 7012, 7081, 7085, 7087, 7115, 7116, 7118, 7120, 7125, 7130, 7150, 7212, 7282, 7290, 7295, 7311, 7313, 7327, 7514, 7612, 7712, 7713, 7720, 7740, 7745, 7760, 7770, 7780, 7991, 7992, 7998, 7999, 8012, 8081, 8085, 8087, 8120, 8125, 8130, 8150, 8212, 8282, 8290, 8295, 8311, 8313, 8327, 8514, 8612, 8712, 8713, 8720, 8740, 8745, 8760, 8770, 8780, 8991, 8992, 8998, 8999],\r\n        3115: [3115, 7115, 8115, 7116, 8116],\r\n        3825: [3825, 7120, 8120, 7311, 8311, 7313, 8313],\r\n        4030: [4030, 6030, 7295, 8295, 7712, 8712, 7713, 8713, 7992, 8992],\r\n        4040: [4040, 6040, 7085, 8085, 7087, 8087],\r\n        4081: [4081, 7012, 8012, 7081, 8081],\r\n        4118: [4118, 6118, 7118, 8118],\r\n        4151: [4151, 7150, 8150],\r\n        4270: [4270, 6270, 7212, 8212, 7720, 8720],\r\n        4272: [4272, 6272, 7212, 8212],\r\n        4302: [4302, 6302, 7311, 8311],\r\n        4310: [4310, 7311, 8311],\r\n        4410: [4410, 6410, 7120, 8120, 7327, 8327, 7998, 8998],\r\n        4420: [4420, 7120, 8120, 7327, 8327, 7998, 8998],\r\n        4430: [4430, 7125, 8125],\r\n        4601: [4601, 7290, 8290, 7612, 8612, 7992, 8992],\r\n        4720: [4720, 7282, 8282, 7720, 8720, 7760, 8760, 7770, 8770],\r\n        4745: [4745, 7740, 8740, 7745, 8745],\r\n        4882: [4882, 7012, 8012, 7081, 8081, 7087, 8087],\r\n        6030: [7712, 7295, 7713, 7992, 8295, 8712, 8713, 8992 ],\r\n        6118: [7118, 8118],\r\n        6430: [8125, 8125],\r\n        7012: [7012, 8012],\r\n        7081: [7081, 8081],\r\n        7085: [7085, 8085],\r\n        7087: [7087, 8087],\r\n        7115: [7115, 8115],\r\n        7116: [7116, 8116],\r\n        7118: [7118, 8118],\r\n        7120: [7120, 8120],\r\n        7125: [7125, 8125],\r\n        7130: [7130, 8130],\r\n        7150: [7150, 8150],\r\n        7212: [7212, 8212],\r\n        7282: [7282, 8282],\r\n        7290: [7290, 8290],\r\n        7295: [7295, 8295],\r\n        7311: [7311, 8311],\r\n        7313: [7313, 8313],\r\n        7327: [7327, 8327],\r\n        7514: [7514, 8514],\r\n        7612: [7612, 8612],\r\n        7712: [7712, 8712],\r\n        7713: [7713, 8713],\r\n        7720: [7720, 8720],\r\n        7740: [7740, 8740],\r\n        7745: [7745, 8745],\r\n        7760: [7760, 8760],\r\n        7770: [7770, 8770],\r\n        7780: [7780, 8780],\r\n        7991: [7991, 8991],\r\n        7992: [7992, 8992],\r\n        7998: [7998, 8998],\r\n        7999: [7999, 8999],\r\n      };\r\n\r\n        //change times in all classes list to military time to match times in all\r\n        //TAs schedules\r\n        function convertStandardTimes(timeString){\r\n            var timeArr = timeString.split(/:|\\s/);\r\n            var hours = parseInt(timeArr[0]);\r\n            var minutes = parseInt(timeArr[1]);\r\n            var amPm = timeArr[2].toLowerCase();\r\n\r\n              // Convert hours to military time\r\n            if (hours < 12 && amPm === \"pm\") {\r\n                hours += 12;\r\n            } else if (hours === 12 && amPm === \"am\") {\r\n                hours -= 12;\r\n            }\r\n\r\n            // Convert military time to string\r\n            var militaryHours = hours.toString();\r\n            var militaryMinutes = minutes.toString();\r\n            if (hours < 10) {\r\n                militaryHours = \"0\" + militaryHours;\r\n            }\r\n            if (minutes < 10) {\r\n                militaryMinutes = \"0\" + militaryMinutes;\r\n            }\r\n            var militaryTimeString = militaryHours + \"\" + militaryMinutes;\r\n\r\n            return militaryTimeString;\r\n            \r\n        }\r\n    \r\n    // Pushes the TA's eligibilty status to the class list (including a reason if they are not eligible)\r\n    function pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, is_able, reasons) {\r\n        let rowData = {\r\n            CRN: curCRN,\r\n            course_number: curCrse,\r\n            taHours: taHours,\r\n            totalEnrolled: enrollment,\r\n            TAID: curTAID,\r\n            reason: reasons,\r\n            able: is_able,\r\n        };\r\n\r\n        // check if this CRN already has a row\r\n        let existingRow = class_list.find((r) => {\r\n            return (\r\n                r.CRN == \"\" + rowData.CRN\r\n            );\r\n        });\r\n\r\n        // if CRN already has row, add TA to list\r\n        if (existingRow) {\r\n\r\n            if (!existingRow.teacher_assistants.some((ta) => ta.TAID == rowData.TAID)){\r\n\r\n                if (is_able) {\r\n                    existingRow.teacher_assistants.push({\r\n                        TAID: rowData.TAID,\r\n                        able: true,\r\n                        \r\n                        able_map: rowData.TAID\r\n                    });\r\n                }\r\n                else {\r\n                    existingRow.teacher_assistants.push({\r\n                        TAID: rowData.TAID,\r\n                        able: false,\r\n                        \r\n                        reason: rowData.reason\r\n                    });\r\n                }\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        // Create new row for CRN if no row already exists for it\r\n        let newRow\r\n\r\n        if (is_able) {\r\n            newRow = {\r\n                CRN: rowData.CRN,\r\n                course_number: rowData.course_number,\r\n                taHours: taHours,\r\n                totalEnrolled: enrollment,\r\n                teacher_assistants: [\r\n                    {\r\n                        TAID: rowData.TAID,\r\n                        able: true,\r\n\r\n                        able_map: rowData.TAID,\r\n                    },\r\n                ],\r\n            };\r\n        }\r\n        else {\r\n            newRow = {\r\n                CRN: rowData.CRN,\r\n                course_number: rowData.course_number,\r\n                taHours: taHours,\r\n                totalEnrolled: enrollment,\r\n                teacher_assistants: [\r\n                    {\r\n                        TAID: rowData.TAID,\r\n                        able: false,\r\n                        reason: rowData.reason\r\n                    },\r\n                ],\r\n            };\r\n        }\r\n        \r\n        class_list.push(newRow);\r\n    };\r\n\r\n\r\n    function handleEligibilityList(){\r\n      const class_list = [];\r\n\r\n\r\n    for (let i = 0; i < all_classes_attend.length; i++){\r\n\r\n        const curCRN = all_classes_attend[i].CRN; // current class being checked CRN\r\n        const curCrse = all_classes_attend[i].crse; //current class being checked Course Number\r\n        const taHours = all_classes_attend[i].totalTAHours; // number of hours this class is good for\r\n        const enrollment = all_classes_attend[i].totalEnrolled; // total number of students enrolled in class\r\n\r\n        const inClassNeeded = all_classes_attend[i].required_attendance; // checks if current class requries TA to be in attendance\r\n        const curClassDays = all_classes_attend[i].days //checks what days the class takes place\r\n\r\n        \r\n\r\n\r\n        var curStartTime = 0;\r\n        var curEndTime = 0;\r\n\r\n\r\n       \r\n        const curTime = all_classes_attend[i].time; // checks the time of current class that is being checked\r\n\r\n        if (curTime.includes(\"am\") || curTime.includes(\"pm\")) { // convert time of class that is being offered for comparison\r\n            var timeArr = curTime.split(\"-\");\r\n            curStartTime = parseInt(convertStandardTimes(timeArr[0]))\r\n            curEndTime = parseInt(convertStandardTimes(timeArr[1]))\r\n        }\r\n\r\n        const qualifiedCourses = QUALIFIED_COURSES[curCrse]; // identify all courses that make TA eligible to teach current course that is being evaluated\r\n        //console.log(\"This is the current course:\", curCrse);\r\n\r\n        for (let j = 0; j < all_TAs.length; j++){\r\n            const curTAID = all_TAs[j].uuid;\r\n            const curTACourses = all_TAs[j].courses; // list of every class that the current TA being evaluated has taken\r\n\r\n            // Determines if the TA was already scheduled to TA\r\n\r\n\r\n            let timeEligible = true;\r\n            let courseEligible = false;\r\n            \r\n            // The TA is eligible for this course if their grade for this course is -A or higher, or they took a qualifying course with a grade of -A or higher\r\n            // So, we loop over all of the courses that the TA has been to (no matter if they have taken it or are taking it)\r\n            for (let k = 0; k < curTACourses.length; k++){\r\n                let takenCourse = curTACourses[k];\r\n                let takenCourseNumber = takenCourse.courseNumber;\r\n\r\n                let gradeEligible = (takenCourse.grade === 'A-' || takenCourse.grade === 'A' || takenCourse.grade === 'A+')\r\n\r\n                // if TA is currently taking the course, they aren't eligible\r\n                if (takenCourse.semester === semester && takenCourse.year === year){\r\n                    // This is not currently planned to have a conflict reasoning\r\n                    continue;\r\n                }\r\n\r\n                let hasTakenClass = takenCourseNumber === curCrse\r\n\r\n                // TA has taken this course in a previous semester, not current one \r\n                if (hasTakenClass && gradeEligible){\r\n                    courseEligible = true;\r\n                    continue;\r\n                }\r\n                \r\n                let hasTakenQualifiedClass = qualifiedCourses && QUALIFIED_COURSES[curCrse].includes(Number(takenCourseNumber))\r\n\r\n                // If the TA has taken a qualifying course in a previous semester\r\n                if (hasTakenQualifiedClass && gradeEligible){\r\n                    courseEligible = true;\r\n                    continue;\r\n                }\r\n\r\n                // If we get here, then \"gradeEligible\" should be false\r\n                // So, we run one more check for a course match and a qualifying course match before sending a conflict reason\r\n                if (hasTakenClass) {\r\n                    pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, `Low grade (${takenCourse.grade}) in course (COMP ${curCrse})`);\r\n                    continue;\r\n                }\r\n                if (hasTakenQualifiedClass) {\r\n                    pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, `Low grade (${takenCourse.grade}) in course (COMP ${curCrse})`)\r\n                    continue;\r\n                }\r\n\r\n                // If we get here, then the TA hasn't taken the matched course, nor any qualifying course\r\n                if (!qualifiedCourses) {\r\n                    pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, `COMP ${curCrse} not taken`);\r\n                    continue;\r\n                }\r\n                \r\n                // The COMP 1900 qualified courses list is very long\r\n                // So, if that course is what we're dealing with, we return a conflict stating that the TA has not taken a class in COMP before\r\n                if (QUALIFIED_COURSES[1900] === qualifiedCourses) {\r\n                    pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, `No COMP class taken`);\r\n                    continue;\r\n                }\r\n                \r\n                let unmatchedClassesReason = `COMP`\r\n                for (let index = 0; index < qualifiedCourses.length; index++) {\r\n                    let qualifedCourse = qualifiedCourses[index]\r\n                    // This is for if we're at the end of the list\r\n                    if (index + 1 === qualifiedCourses.length) {\r\n                        // This if for if there are only two items in the list\r\n                        if (index === 1) {\r\n                            unmatchedClassesReason += ` or ${qualifedCourse} not taken`;\r\n                            break;\r\n                        }\r\n                        \r\n                        unmatchedClassesReason += `, or ${qualifedCourse} not taken`;\r\n                        break;\r\n                    }\r\n                    \r\n                    // This is for if we are on the first item in the list\r\n                    if (index === 0) {\r\n                        unmatchedClassesReason += ` ${qualifedCourse}`;\r\n                        continue;\r\n                    }\r\n                    \r\n                    unmatchedClassesReason += `, ${qualifedCourse}`;\r\n                }\r\n                pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, unmatchedClassesReason);\r\n            }\r\n\r\n            if (courseEligible === true){ // if TA has taken the class or taken an eligible class\r\n                for (let x = 0; x < curTACourses.length; x++){ // iterate through each class the TA has taken\r\n                    const takingCourse = curTACourses[x];\r\n\r\n                    const daysOfTakingCourse = curTACourses[x].days\r\n\r\n                    if (takingCourse.semester === semester && takingCourse.year === year){ // if class that is being checked is happening this semester\r\n\r\n                        if (inClassNeeded == \"Y\\r\"){ //if current class requires TA to be present\r\n                            if (daysOfTakingCourse.includes(curClassDays) || curClassDays.includes(daysOfTakingCourse)){ // if current TA class and class happen on same days\r\n                                //console.log(daysOfTakingCourse, curClassDays);\r\n\r\n                                if (takingCourse.startTime != ''){\r\n                                \r\n                                    const class_TA_taking_start_time = parseInt(takingCourse.startTime); //start time of class that TA is taking current semester\r\n\r\n                                    const class_TA_taking_end_time = parseInt(takingCourse.stopTime); //stop time of class that TA is taking current semester\r\n                                    // check if current class and class that the TA is taking is overlapping in time at all\r\n                                    if ((curStartTime - class_TA_taking_start_time >= 0 && curStartTime - class_TA_taking_end_time <= 0) || (curEndTime - class_TA_taking_start_time >= 0 && curEndTime - class_TA_taking_end_time <= 0)){\r\n                                        timeEligible = false;\r\n                                    }\r\n                                    else if ((class_TA_taking_start_time - curStartTime >= 0 && class_TA_taking_start_time - curEndTime <= 0) || (class_TA_taking_end_time - curStartTime >= 0 && class_TA_taking_end_time - curEndTime <= 0)){\r\n                                        timeEligible = false;\r\n                                    }\r\n                                }\r\n                            }\r\n                        } \r\n                        else { // if TA does not need to be in class, they are timeEligible\r\n                            timeEligible = true;\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (timeEligible === false) {\r\n                pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, \"Doesn't have the time required to TA for this course\");\r\n                continue;\r\n            }\r\n            \r\n            // At this point, the TA is time eligible, and has taken the class or taken an eligible class with a high enough grade\r\n\r\n            // Since \"timeEligible\" defaults to true, if \"courseEligible\" is false, the above if statement will be skipped\r\n            // \"timeEligible\" should not default to false (the if statement below should not be removed) since a failed eligiblity check will improperly enter the above if statement\r\n            // Instead, an error ineligibly reason is given at the end of the loop\r\n            if (courseEligible === true){ \r\n                pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, true, \"not applicable; TA is eligible\");\r\n                continue;\r\n            }\r\n\r\n            // As stated above, if we get here, we don't know what happened\r\n            pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, \"TA is not eligible for an unknown reason?\");\r\n        }\r\n    }\r\n\r\n    console.log(class_list);\r\n\r\n    setClassList(class_list);\r\n\r\n\r\n}\r\n\r\nuseEffect(() => {\r\n    handleEligibilityList();\r\n    setRunAlg(true)\r\n  }, []);\r\n\r\n\r\n  return null;\r\n\r\n}\r\n\r\nexport default CreateEligList;","/home/nellexvul/GitRepos/TABS/src/components/inputHandlers/AllClassesCSV.js",["113","114","115","116","117","118","119","120"],[],"/home/nellexvul/GitRepos/TABS/src/components/inputHandlers/AllTAsCSV.js",["121","122","123","124"],[],"/home/nellexvul/GitRepos/TABS/src/components/inputHandlers/TAListCSV.js",["125","126","127","128","129","130"],[],"/home/nellexvul/GitRepos/TABS/src/components/inputHandlers/InClassNeccCSV.js",["131","132","133","134","135","136","137","138","139","140"],[],"/home/nellexvul/GitRepos/TABS/src/components/utils/PythonFunctions.js",[],[],"/home/nellexvul/GitRepos/TABS/src/components/utils/PreprocessingFunctions.js",["141","142","143","144","145","146","147","148","149","150"],[],{"ruleId":"151","severity":1,"message":"152","line":12,"column":11,"nodeType":"153","endLine":12,"endColumn":35},{"ruleId":"154","severity":1,"message":"155","line":3,"column":8,"nodeType":"156","messageId":"157","endLine":3,"endColumn":18},{"ruleId":"154","severity":1,"message":"158","line":13,"column":10,"nodeType":"156","messageId":"157","endLine":13,"endColumn":18},{"ruleId":"159","severity":1,"message":"160","line":19,"column":12,"nodeType":"161","messageId":"162","endLine":19,"endColumn":14},{"ruleId":"159","severity":1,"message":"163","line":19,"column":65,"nodeType":"161","messageId":"162","endLine":19,"endColumn":67},{"ruleId":"159","severity":1,"message":"163","line":19,"column":116,"nodeType":"161","messageId":"162","endLine":19,"endColumn":118},{"ruleId":"159","severity":1,"message":"160","line":26,"column":12,"nodeType":"161","messageId":"162","endLine":26,"endColumn":14},{"ruleId":"154","severity":1,"message":"164","line":1,"column":17,"nodeType":"156","messageId":"157","endLine":1,"endColumn":25},{"ruleId":"154","severity":1,"message":"165","line":1,"column":27,"nodeType":"156","messageId":"157","endLine":1,"endColumn":36},{"ruleId":"154","severity":1,"message":"166","line":7,"column":8,"nodeType":"156","messageId":"157","endLine":7,"endColumn":22},{"ruleId":"154","severity":1,"message":"167","line":25,"column":10,"nodeType":"156","messageId":"157","endLine":25,"endColumn":25},{"ruleId":"154","severity":1,"message":"168","line":25,"column":27,"nodeType":"156","messageId":"157","endLine":25,"endColumn":45},{"ruleId":"154","severity":1,"message":"164","line":2,"column":10,"nodeType":"156","messageId":"157","endLine":2,"endColumn":18},{"ruleId":"154","severity":1,"message":"165","line":2,"column":20,"nodeType":"156","messageId":"157","endLine":2,"endColumn":29},{"ruleId":"154","severity":1,"message":"169","line":3,"column":10,"nodeType":"156","messageId":"157","endLine":3,"endColumn":22},{"ruleId":"154","severity":1,"message":"170","line":3,"column":40,"nodeType":"156","messageId":"157","endLine":3,"endColumn":59},{"ruleId":"154","severity":1,"message":"171","line":3,"column":61,"nodeType":"156","messageId":"157","endLine":3,"endColumn":64},{"ruleId":"154","severity":1,"message":"172","line":26,"column":7,"nodeType":"156","messageId":"157","endLine":26,"endColumn":18},{"ruleId":"173","severity":1,"message":"174","line":128,"column":8,"nodeType":"156","messageId":"175","endLine":128,"endColumn":14},{"ruleId":"173","severity":1,"message":"176","line":129,"column":8,"nodeType":"156","messageId":"175","endLine":129,"endColumn":10},{"ruleId":"173","severity":1,"message":"177","line":130,"column":8,"nodeType":"156","messageId":"175","endLine":130,"endColumn":20},{"ruleId":"173","severity":1,"message":"178","line":131,"column":8,"nodeType":"156","messageId":"175","endLine":131,"endColumn":16},{"ruleId":"173","severity":1,"message":"174","line":133,"column":8,"nodeType":"156","messageId":"175","endLine":133,"endColumn":14},{"ruleId":"173","severity":1,"message":"176","line":134,"column":8,"nodeType":"156","messageId":"175","endLine":134,"endColumn":10},{"ruleId":"173","severity":1,"message":"177","line":135,"column":8,"nodeType":"156","messageId":"175","endLine":135,"endColumn":20},{"ruleId":"173","severity":1,"message":"178","line":136,"column":8,"nodeType":"156","messageId":"175","endLine":136,"endColumn":16},{"ruleId":"159","severity":1,"message":"163","line":151,"column":21,"nodeType":"161","messageId":"162","endLine":151,"endColumn":23},{"ruleId":"179","severity":1,"message":"180","line":189,"column":48,"nodeType":"181","messageId":"182","endLine":189,"endColumn":94},{"ruleId":"179","severity":1,"message":"183","line":200,"column":21,"nodeType":"181","messageId":"182","endLine":200,"endColumn":73},{"ruleId":"179","severity":1,"message":"184","line":311,"column":59,"nodeType":"181","messageId":"182","endLine":311,"endColumn":103},{"ruleId":"159","severity":1,"message":"160","line":396,"column":31,"nodeType":"161","messageId":"162","endLine":396,"endColumn":33},{"ruleId":"154","severity":1,"message":"166","line":2,"column":8,"nodeType":"156","messageId":"157","endLine":2,"endColumn":22},{"ruleId":"154","severity":1,"message":"185","line":8,"column":12,"nodeType":"156","messageId":"157","endLine":8,"endColumn":32},{"ruleId":"154","severity":1,"message":"186","line":8,"column":34,"nodeType":"156","messageId":"157","endLine":8,"endColumn":55},{"ruleId":"154","severity":1,"message":"187","line":10,"column":53,"nodeType":"156","messageId":"157","endLine":10,"endColumn":62},{"ruleId":"159","severity":1,"message":"160","line":118,"column":23,"nodeType":"161","messageId":"162","endLine":118,"endColumn":25},{"ruleId":"159","severity":1,"message":"160","line":125,"column":70,"nodeType":"161","messageId":"162","endLine":125,"endColumn":72},{"ruleId":"159","severity":1,"message":"160","line":318,"column":43,"nodeType":"161","messageId":"162","endLine":318,"endColumn":45},{"ruleId":"159","severity":1,"message":"163","line":322,"column":60,"nodeType":"161","messageId":"162","endLine":322,"endColumn":62},{"ruleId":"188","severity":1,"message":"189","line":375,"column":6,"nodeType":"190","endLine":375,"endColumn":8,"suggestions":"191"},{"ruleId":"154","severity":1,"message":"192","line":2,"column":8,"nodeType":"156","messageId":"157","endLine":2,"endColumn":22},{"ruleId":"154","severity":1,"message":"193","line":7,"column":10,"nodeType":"156","messageId":"157","endLine":7,"endColumn":18},{"ruleId":"154","severity":1,"message":"194","line":7,"column":20,"nodeType":"156","messageId":"157","endLine":7,"endColumn":31},{"ruleId":"154","severity":1,"message":"195","line":9,"column":10,"nodeType":"156","messageId":"157","endLine":9,"endColumn":26},{"ruleId":"154","severity":1,"message":"196","line":9,"column":28,"nodeType":"156","messageId":"157","endLine":9,"endColumn":47},{"ruleId":"154","severity":1,"message":"197","line":11,"column":11,"nodeType":"156","messageId":"157","endLine":11,"endColumn":22},{"ruleId":"159","severity":1,"message":"163","line":63,"column":77,"nodeType":"161","messageId":"162","endLine":63,"endColumn":79},{"ruleId":"198","severity":1,"message":"199","line":112,"column":25,"nodeType":"153","endLine":112,"endColumn":86},{"ruleId":"154","severity":1,"message":"200","line":2,"column":8,"nodeType":"156","messageId":"157","endLine":2,"endColumn":22},{"ruleId":"154","severity":1,"message":"193","line":7,"column":12,"nodeType":"156","messageId":"157","endLine":7,"endColumn":20},{"ruleId":"154","severity":1,"message":"194","line":7,"column":22,"nodeType":"156","messageId":"157","endLine":7,"endColumn":33},{"ruleId":"198","severity":1,"message":"199","line":167,"column":19,"nodeType":"153","endLine":167,"endColumn":80},{"ruleId":"154","severity":1,"message":"192","line":2,"column":8,"nodeType":"156","messageId":"157","endLine":2,"endColumn":22},{"ruleId":"154","severity":1,"message":"201","line":3,"column":8,"nodeType":"156","messageId":"157","endLine":3,"endColumn":17},{"ruleId":"154","severity":1,"message":"193","line":7,"column":12,"nodeType":"156","messageId":"157","endLine":7,"endColumn":20},{"ruleId":"154","severity":1,"message":"194","line":7,"column":22,"nodeType":"156","messageId":"157","endLine":7,"endColumn":33},{"ruleId":"154","severity":1,"message":"202","line":10,"column":13,"nodeType":"156","messageId":"157","endLine":10,"endColumn":16},{"ruleId":"198","severity":1,"message":"199","line":97,"column":25,"nodeType":"153","endLine":97,"endColumn":82},{"ruleId":"154","severity":1,"message":"201","line":2,"column":8,"nodeType":"156","messageId":"157","endLine":2,"endColumn":17},{"ruleId":"154","severity":1,"message":"200","line":3,"column":8,"nodeType":"156","messageId":"157","endLine":3,"endColumn":22},{"ruleId":"154","severity":1,"message":"203","line":4,"column":8,"nodeType":"156","messageId":"157","endLine":4,"endColumn":17},{"ruleId":"154","severity":1,"message":"193","line":9,"column":12,"nodeType":"156","messageId":"157","endLine":9,"endColumn":20},{"ruleId":"154","severity":1,"message":"194","line":9,"column":22,"nodeType":"156","messageId":"157","endLine":9,"endColumn":33},{"ruleId":"154","severity":1,"message":"204","line":12,"column":13,"nodeType":"156","messageId":"157","endLine":12,"endColumn":33},{"ruleId":"159","severity":1,"message":"160","line":78,"column":75,"nodeType":"161","messageId":"162","endLine":78,"endColumn":77},{"ruleId":"173","severity":1,"message":"205","line":99,"column":14,"nodeType":"156","messageId":"175","endLine":99,"endColumn":33},{"ruleId":"173","severity":1,"message":"206","line":103,"column":14,"nodeType":"156","messageId":"175","endLine":103,"endColumn":31},{"ruleId":"198","severity":1,"message":"199","line":128,"column":25,"nodeType":"153","endLine":128,"endColumn":87},{"ruleId":"154","severity":1,"message":"169","line":1,"column":10,"nodeType":"156","messageId":"157","endLine":1,"endColumn":22},{"ruleId":"154","severity":1,"message":"207","line":1,"column":24,"nodeType":"156","messageId":"157","endLine":1,"endColumn":38},{"ruleId":"154","severity":1,"message":"208","line":1,"column":66,"nodeType":"156","messageId":"157","endLine":1,"endColumn":80},{"ruleId":"159","severity":1,"message":"160","line":49,"column":69,"nodeType":"161","messageId":"162","endLine":49,"endColumn":71},{"ruleId":"159","severity":1,"message":"160","line":50,"column":69,"nodeType":"161","messageId":"162","endLine":50,"endColumn":71},{"ruleId":"159","severity":1,"message":"160","line":51,"column":71,"nodeType":"161","messageId":"162","endLine":51,"endColumn":73},{"ruleId":"159","severity":1,"message":"160","line":65,"column":69,"nodeType":"161","messageId":"162","endLine":65,"endColumn":71},{"ruleId":"159","severity":1,"message":"160","line":66,"column":69,"nodeType":"161","messageId":"162","endLine":66,"endColumn":71},{"ruleId":"159","severity":1,"message":"160","line":67,"column":71,"nodeType":"161","messageId":"162","endLine":67,"endColumn":73},{"ruleId":"209","severity":1,"message":"210","line":83,"column":22,"nodeType":"181","messageId":"211","endLine":83,"endColumn":24},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'LoadingBar' is defined but never used.","Identifier","unusedVar","'progress' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'useState' is defined but never used.","'useEffect' is defined but never used.","'StableMarriage' is defined but never used.","'inClassNeccData' is assigned a value but never used.","'setInClassNeccData' is assigned a value but never used.","'shuffleArray' is defined but never used.","'randomOneOrMinusOne' is defined but never used.","'XOR' is defined but never used.","'setProgress' is assigned a value but never used.","no-redeclare","'course' is already defined.","redeclared","'ta' is already defined.","'course_hours' is already defined.","'ta_hours' is already defined.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'preferred_rankings_women'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'preferred_rankings_men'.","Function declared in a loop contains unsafe references to variable(s) 'i'.","'all_eligible_classes' is assigned a value but never used.","'setAllEligibleClasses' is assigned a value but never used.","'classList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleEligibilityList' and 'setRunAlg'. Either include them or remove the dependency array.","ArrayExpression",["212"],"'InClassNeccCSV' is defined but never used.","'showHelp' is assigned a value but never used.","'setShowHelp' is assigned a value but never used.","'fullScreenBubble' is assigned a value but never used.","'setFullScreenBubble' is assigned a value but never used.","'all_classes' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'CreateEligList' is defined but never used.","'AllTAsCSV' is defined but never used.","'tas' is assigned a value but never used.","'TAListCSV' is defined but never used.","'all_classes_attended' is assigned a value but never used.","'handleHelpIconClick' is already defined.","'handleBubbleClick' is already defined.","'removeItemOnce' is defined but never used.","'shuffleSegment' is defined but never used.","array-callback-return","Array.prototype.sort() expects a value to be returned at the end of arrow function.","expectedAtEnd",{"desc":"213","fix":"214"},"Update the dependencies array to be: [handleEligibilityList, setRunAlg]",{"range":"215","text":"216"},[16764,16766],"[handleEligibilityList, setRunAlg]"]