{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport StableMarriage from \"./StableMarriage\";\nfunction CreateEligList(props) {\n  _s();\n  const [all_eligible_classes, setAllEligibleClasses] = useState([]);\n  const {\n    setRunAlg,\n    all_classes_attend,\n    all_TAs,\n    classList,\n    setClassList\n  } = props;\n  const year = \"2023\"; // need to make this user input at some point\n\n  const semester = \"Spring\";\n  const QUALIFIED_COURSES = {\n    1900: [3115, 3825, 4030, 4040, 4081, 4118, 4151, 4270, 4272, 4302, 4310, 4410, 4420, 4430, 4601, 4720, 4745, 4882, 6010, 6030, 6040, 6118, 6270, 6272, 6302, 6410, 7012, 7081, 7085, 7087, 7115, 7116, 7118, 7120, 7125, 7130, 7150, 7212, 7282, 7290, 7295, 7311, 7313, 7327, 7514, 7612, 7712, 7713, 7720, 7740, 7745, 7760, 7770, 7780, 7991, 7992, 7998, 7999, 8012, 8081, 8085, 8087, 8120, 8125, 8130, 8150, 8212, 8282, 8290, 8295, 8311, 8313, 8327, 8514, 8612, 8712, 8713, 8720, 8740, 8745, 8760, 8770, 8780, 8991, 8992, 8998, 8999],\n    3115: [3115, 7115, 8115, 7116, 8116],\n    3825: [3825, 7120, 8120, 7311, 8311, 7313, 8313],\n    4030: [4030, 6030, 7295, 8295, 7712, 8712, 7713, 8713, 7992, 8992],\n    4040: [4040, 6040, 7085, 8085, 7087, 8087],\n    4081: [4081, 7012, 8012, 7081, 8081],\n    4118: [4118, 6118, 7118, 8118],\n    4151: [4151, 7150, 8150],\n    4270: [4270, 6270, 7212, 8212, 7720, 8720],\n    4272: [4272, 6272, 7212, 8212],\n    4302: [4302, 6302, 7311, 8311],\n    4310: [4310, 7311, 8311],\n    4410: [4410, 6410, 7120, 8120, 7327, 8327, 7998, 8998],\n    4420: [4420, 7120, 8120, 7327, 8327, 7998, 8998],\n    4430: [4430, 7125, 8125],\n    4601: [4601, 7290, 8290, 7612, 8612, 7992, 8992],\n    4720: [4720, 7282, 8282, 7720, 8720, 7760, 8760, 7770, 8770],\n    4745: [4745, 7740, 8740, 7745, 8745],\n    4882: [4882, 7012, 8012, 7081, 8081, 7087, 8087],\n    6030: [7712, 7295, 7713, 7992, 8295, 8712, 8713, 8992],\n    6118: [7118, 8118],\n    6118: [7118, 8118],\n    6430: [8125, 8125],\n    7012: [7012, 8012],\n    7081: [7081, 8081],\n    7085: [7085, 8085],\n    7087: [7087, 8087],\n    7115: [7115, 8115],\n    7116: [7116, 8116],\n    7118: [7118, 8118],\n    7120: [7120, 8120],\n    7125: [7125, 8125],\n    7130: [7130, 8130],\n    7150: [7150, 8150],\n    7212: [7212, 8212],\n    7282: [7282, 8282],\n    7290: [7290, 8290],\n    7295: [7295, 8295],\n    7311: [7311, 8311],\n    7313: [7313, 8313],\n    7327: [7327, 8327],\n    7514: [7514, 8514],\n    7612: [7612, 8612],\n    7712: [7712, 8712],\n    7713: [7713, 8713],\n    7720: [7720, 8720],\n    7740: [7740, 8740],\n    7745: [7745, 8745],\n    7760: [7760, 8760],\n    7770: [7770, 8770],\n    7780: [7780, 8780],\n    7991: [7991, 8991],\n    7992: [7992, 8992],\n    7998: [7998, 8998],\n    7999: [7999, 8999]\n  };\n\n  //change times in all classes list to military time to match times in all\n  //TAs schedules\n  function convertStandardTimes(timeString) {\n    var timeArr = timeString.split(/:|\\s/);\n    var hours = parseInt(timeArr[0]);\n    var minutes = parseInt(timeArr[1]);\n    var amPm = timeArr[2].toLowerCase();\n\n    // Convert hours to military time\n    if (hours < 12 && amPm === \"pm\") {\n      hours += 12;\n    } else if (hours === 12 && amPm === \"am\") {\n      hours -= 12;\n    }\n\n    // Convert military time to string\n    var militaryHours = hours.toString();\n    var militaryMinutes = minutes.toString();\n    if (hours < 10) {\n      militaryHours = \"0\" + militaryHours;\n    }\n    if (minutes < 10) {\n      militaryMinutes = \"0\" + militaryMinutes;\n    }\n    var militaryTimeString = militaryHours + \"\" + militaryMinutes;\n    return militaryTimeString;\n  }\n  function handleEligibilityList() {\n    const class_list = [];\n    for (let i = 0; i < all_classes_attend.length; i++) {\n      const curCRN = all_classes_attend[i].CRN; // current class being checked CRN\n      const curCrse = all_classes_attend[i].crse; //current class being checked Course Number\n      const taHours = all_classes_attend[i].totalTAHours; // number of hours this class is good for\n      const enrollment = all_classes_attend[i].totalEnrolled; // total number of students enrolled in class\n\n      const inClassNeeded = all_classes_attend[i].required_attendance; // checks if current class requries TA to be in attendance\n      const curClassDays = all_classes_attend[i].days; //checks what days the class takes place\n\n      var curStartTime = 0;\n      var curEndTime = 0;\n      const curTime = all_classes_attend[i].time; // checks the time of current class that is being checked\n\n      if (curTime.includes(\"am\") || curTime.includes(\"pm\")) {\n        // convert time of class that is being offered for comparison\n        var timeArr = curTime.split(\"-\");\n        curStartTime = parseInt(convertStandardTimes(timeArr[0]));\n        curEndTime = parseInt(convertStandardTimes(timeArr[1]));\n      }\n      const qualifiedCourses = QUALIFIED_COURSES[curCrse]; // identify all courses that make TA eligible to teach current course that is being evaluated\n      //console.log(\"This is the current course:\", curCrse);\n\n      for (let j = 0; j < all_TAs.length; j++) {\n        const curTAID = all_TAs[j].uuid;\n        const curTA = all_TAs[j].courses; // list of every class that current TA being evaluated has taken\n\n        let timeEligible = true;\n        let onlineClass = false;\n        let hasTakenClass = false;\n        let hasTakenQualifiedClass = false;\n        for (let k = 0; k < curTA.length; k++) {\n          const takenCourse = curTA[k];\n          const takenCourseNumber = takenCourse.courseNumber;\n\n          //console.log(takenCourse);\n\n          const daysOfTakingCourse = takenCourse.days;\n          if (takenCourse.semester === semester && takenCourse.year === year) {\n            // if TA is currently taking course they aren't eligible\n            continue;\n          } else {\n            // TA has taken this course in a previous semester, not current one \n            if (takenCourseNumber === curCrse && (takenCourse.grade === 'A-' || takenCourse.grade === 'A' || takenCourse.grade === 'A+')) {\n              hasTakenClass = true;\n            } else if (qualifiedCourses && QUALIFIED_COURSES[curCrse].includes(Number(takenCourseNumber))) {\n              hasTakenQualifiedClass = true;\n            }\n          }\n        }\n        if (hasTakenClass === true || hasTakenQualifiedClass === true) {\n          // if TA has taken the class or taken an eligible class\n          for (let x = 0; x < curTA.length; x++) {\n            // iterate through each class TA has taken\n            const takingCourse = curTA[x];\n            const daysOfTakingCourse = curTA[x].days;\n            if (takingCourse.semester === semester && takingCourse.year === year) {\n              // if class that is being checked is happening this semester\n\n              if (inClassNeeded == \"Y\\r\") {\n                //if current class requires TA to be present\n                if (daysOfTakingCourse.includes(curClassDays) || curClassDays.includes(daysOfTakingCourse)) {\n                  // if current TA class and class happen on same days\n                  //console.log(daysOfTakingCourse, curClassDays);\n\n                  if (takingCourse.startTime != '') {\n                    const class_TA_taking_start_time = parseInt(takingCourse.startTime); //start time of class that TA is taking current semester\n\n                    const class_TA_taking_end_time = parseInt(takingCourse.stopTime); //stop time of class that TA is taking current semester\n                    // check if current class and class TA is taking overlap in time at all\n                    if (curStartTime - class_TA_taking_start_time >= 0 && curStartTime - class_TA_taking_end_time <= 0 || curEndTime - class_TA_taking_start_time >= 0 && curEndTime - class_TA_taking_end_time <= 0) {\n                      timeEligible = false;\n                    }\n                    if (class_TA_taking_start_time - curStartTime >= 0 && class_TA_taking_start_time - curEndTime <= 0 || class_TA_taking_end_time - curStartTime >= 0 && class_TA_taking_end_time - curEndTime <= 0) {\n                      timeEligible = false;\n                    }\n                  }\n                }\n              } else {\n                // if TA does not need to be in class, they are timeEligible\n                timeEligible = true;\n              }\n            }\n          }\n        }\n        if (timeEligible === true && (hasTakenClass === true || hasTakenQualifiedClass === true)) {\n          // TA is time eligible and has taken class\n          const rowData = {\n            CRN: curCRN,\n            course_number: curCrse,\n            taHours: taHours,\n            totalEnrolled: enrollment,\n            able_TA: curTAID\n          };\n\n          // check if this CRN already has a row\n          let existingRow = class_list.find(r => {\n            return r.CRN == rowData.CRN;\n          });\n\n          // if CRN already has row, add TA to list of eligible TAs\n          if (existingRow) {\n            if (!existingRow.teacher_assistants.some(ta => ta.able_TA == rowData.able_TA)) {\n              existingRow.teacher_assistants.push({\n                able_TA: rowData.able_TA\n              });\n            }\n          }\n\n          // Create new row for CRN if no row already exists for it\n          else {\n            const newRow = {\n              CRN: rowData.CRN,\n              course_number: rowData.course_number,\n              taHours: taHours,\n              totalEnrolled: enrollment,\n              teacher_assistants: [{\n                able_TA: rowData.able_TA\n              }]\n            };\n            class_list.push(newRow);\n          }\n        }\n      }\n      // Check if a row has been created for the current courses CRN\n      let anyOptions = class_list.find(t => {\n        return t.CRN == curCRN;\n      });\n      if (!anyOptions) {\n        //if no row has been made, this means no TA is eligible, therefore, create row with this information\n        const emptyData = {\n          CRN: curCRN,\n          course_number: curCrse,\n          taHours: taHours,\n          totalEnrolled: enrollment,\n          teacher_assistants: [{\n            able_TA: \"No eligible Teacher Assistants\"\n          }]\n        };\n        class_list.push(emptyData);\n      }\n    }\n    console.log(class_list);\n    setClassList(class_list);\n  }\n  useEffect(() => {\n    handleEligibilityList();\n    setRunAlg(true);\n  }, []);\n  return null;\n}\n_s(CreateEligList, \"FQU4mi7dGChfegbaBiKZ9HrvQYk=\");\n_c = CreateEligList;\nexport default CreateEligList;\nvar _c;\n$RefreshReg$(_c, \"CreateEligList\");","map":{"version":3,"names":["useState","useEffect","StableMarriage","CreateEligList","props","_s","all_eligible_classes","setAllEligibleClasses","setRunAlg","all_classes_attend","all_TAs","classList","setClassList","year","semester","QUALIFIED_COURSES","convertStandardTimes","timeString","timeArr","split","hours","parseInt","minutes","amPm","toLowerCase","militaryHours","toString","militaryMinutes","militaryTimeString","handleEligibilityList","class_list","i","length","curCRN","CRN","curCrse","crse","taHours","totalTAHours","enrollment","totalEnrolled","inClassNeeded","required_attendance","curClassDays","days","curStartTime","curEndTime","curTime","time","includes","qualifiedCourses","j","curTAID","uuid","curTA","courses","timeEligible","onlineClass","hasTakenClass","hasTakenQualifiedClass","k","takenCourse","takenCourseNumber","courseNumber","daysOfTakingCourse","grade","Number","x","takingCourse","startTime","class_TA_taking_start_time","class_TA_taking_end_time","stopTime","rowData","course_number","able_TA","existingRow","find","r","teacher_assistants","some","ta","push","newRow","anyOptions","t","emptyData","console","log","_c","$RefreshReg$"],"sources":["/home/terry/taps/src/components/CreateEligList.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport StableMarriage from \"./StableMarriage\";\r\n\r\n\r\n\r\nfunction CreateEligList(props){\r\n\r\n    const [all_eligible_classes, setAllEligibleClasses] = useState([]);\r\n\r\n    const { setRunAlg, all_classes_attend, all_TAs, classList, setClassList }  = props;\r\n\r\n    const year = \"2023\"; // need to make this user input at some point\r\n\r\n    const semester = \"Spring\";\r\n\r\n    const QUALIFIED_COURSES = {\r\n        1900: [3115, 3825, 4030, 4040, 4081, 4118, 4151, 4270, 4272, 4302, 4310, 4410, 4420, 4430, 4601, 4720, 4745, 4882, 6010, 6030, 6040, 6118, 6270, 6272, 6302, 6410, 7012, 7081, 7085, 7087, 7115, 7116, 7118, 7120, 7125, 7130, 7150, 7212, 7282, 7290, 7295, 7311, 7313, 7327, 7514, 7612, 7712, 7713, 7720, 7740, 7745, 7760, 7770, 7780, 7991, 7992, 7998, 7999, 8012, 8081, 8085, 8087, 8120, 8125, 8130, 8150, 8212, 8282, 8290, 8295, 8311, 8313, 8327, 8514, 8612, 8712, 8713, 8720, 8740, 8745, 8760, 8770, 8780, 8991, 8992, 8998, 8999],\r\n        3115: [3115, 7115, 8115, 7116, 8116],\r\n        3825: [3825, 7120, 8120, 7311, 8311, 7313, 8313],\r\n        4030: [4030, 6030, 7295, 8295, 7712, 8712, 7713, 8713, 7992, 8992],\r\n        4040: [4040, 6040, 7085, 8085, 7087, 8087],\r\n        4081: [4081, 7012, 8012, 7081, 8081],\r\n        4118: [4118, 6118, 7118, 8118],\r\n        4151: [4151, 7150, 8150],\r\n        4270: [4270, 6270, 7212, 8212, 7720, 8720],\r\n        4272: [4272, 6272, 7212, 8212],\r\n        4302: [4302, 6302, 7311, 8311],\r\n        4310: [4310, 7311, 8311],\r\n        4410: [4410, 6410, 7120, 8120, 7327, 8327, 7998, 8998],\r\n        4420: [4420, 7120, 8120, 7327, 8327, 7998, 8998],\r\n        4430: [4430, 7125, 8125],\r\n        4601: [4601, 7290, 8290, 7612, 8612, 7992, 8992],\r\n        4720: [4720, 7282, 8282, 7720, 8720, 7760, 8760, 7770, 8770],\r\n        4745: [4745, 7740, 8740, 7745, 8745],\r\n        4882: [4882, 7012, 8012, 7081, 8081, 7087, 8087],\r\n        6030: [7712, 7295, 7713, 7992, 8295, 8712, 8713, 8992 ],\r\n        6118: [7118, 8118],\r\n        6118: [7118, 8118],\r\n        6430: [8125, 8125],\r\n        7012: [7012, 8012],\r\n        7081: [7081, 8081],\r\n        7085: [7085, 8085],\r\n        7087: [7087, 8087],\r\n        7115: [7115, 8115],\r\n        7116: [7116, 8116],\r\n        7118: [7118, 8118],\r\n        7120: [7120, 8120],\r\n        7125: [7125, 8125],\r\n        7130: [7130, 8130],\r\n        7150: [7150, 8150],\r\n        7212: [7212, 8212],\r\n        7282: [7282, 8282],\r\n        7290: [7290, 8290],\r\n        7295: [7295, 8295],\r\n        7311: [7311, 8311],\r\n        7313: [7313, 8313],\r\n        7327: [7327, 8327],\r\n        7514: [7514, 8514],\r\n        7612: [7612, 8612],\r\n        7712: [7712, 8712],\r\n        7713: [7713, 8713],\r\n        7720: [7720, 8720],\r\n        7740: [7740, 8740],\r\n        7745: [7745, 8745],\r\n        7760: [7760, 8760],\r\n        7770: [7770, 8770],\r\n        7780: [7780, 8780],\r\n        7991: [7991, 8991],\r\n        7992: [7992, 8992],\r\n        7998: [7998, 8998],\r\n        7999: [7999, 8999],\r\n      };\r\n\r\n        //change times in all classes list to military time to match times in all\r\n        //TAs schedules\r\n        function convertStandardTimes(timeString){\r\n            var timeArr = timeString.split(/:|\\s/);\r\n            var hours = parseInt(timeArr[0]);\r\n            var minutes = parseInt(timeArr[1]);\r\n            var amPm = timeArr[2].toLowerCase();\r\n\r\n              // Convert hours to military time\r\n            if (hours < 12 && amPm === \"pm\") {\r\n                hours += 12;\r\n            } else if (hours === 12 && amPm === \"am\") {\r\n                hours -= 12;\r\n            }\r\n\r\n            // Convert military time to string\r\n            var militaryHours = hours.toString();\r\n            var militaryMinutes = minutes.toString();\r\n            if (hours < 10) {\r\n                militaryHours = \"0\" + militaryHours;\r\n            }\r\n            if (minutes < 10) {\r\n                militaryMinutes = \"0\" + militaryMinutes;\r\n            }\r\n            var militaryTimeString = militaryHours + \"\" + militaryMinutes;\r\n\r\n            return militaryTimeString;\r\n            \r\n        }\r\n\r\n\r\n    function handleEligibilityList(){\r\n      const class_list = [];\r\n\r\n\r\n    for (let i = 0; i < all_classes_attend.length; i++){\r\n\r\n        const curCRN = all_classes_attend[i].CRN; // current class being checked CRN\r\n        const curCrse = all_classes_attend[i].crse; //current class being checked Course Number\r\n        const taHours = all_classes_attend[i].totalTAHours; // number of hours this class is good for\r\n        const enrollment = all_classes_attend[i].totalEnrolled; // total number of students enrolled in class\r\n\r\n        const inClassNeeded = all_classes_attend[i].required_attendance; // checks if current class requries TA to be in attendance\r\n        const curClassDays = all_classes_attend[i].days //checks what days the class takes place\r\n\r\n        \r\n\r\n\r\n        var curStartTime = 0;\r\n        var curEndTime = 0;\r\n\r\n\r\n       \r\n        const curTime = all_classes_attend[i].time; // checks the time of current class that is being checked\r\n\r\n        if (curTime.includes(\"am\") || curTime.includes(\"pm\")) { // convert time of class that is being offered for comparison\r\n            var timeArr = curTime.split(\"-\");\r\n            curStartTime = parseInt(convertStandardTimes(timeArr[0]))\r\n            curEndTime = parseInt(convertStandardTimes(timeArr[1]))\r\n        }\r\n\r\n        const qualifiedCourses = QUALIFIED_COURSES[curCrse]; // identify all courses that make TA eligible to teach current course that is being evaluated\r\n        //console.log(\"This is the current course:\", curCrse);\r\n\r\n        for (let j = 0; j < all_TAs.length; j++){\r\n            const curTAID = all_TAs[j].uuid;\r\n            const curTA = all_TAs[j].courses; // list of every class that current TA being evaluated has taken\r\n\r\n\r\n            let timeEligible = true;\r\n            let onlineClass = false \r\n            let hasTakenClass = false;\r\n            let hasTakenQualifiedClass = false;\r\n\r\n            for (let k = 0; k < curTA.length; k++){\r\n                const takenCourse = curTA[k];\r\n                const takenCourseNumber = takenCourse.courseNumber;\r\n\r\n\r\n                //console.log(takenCourse);\r\n\r\n    \r\n                const daysOfTakingCourse = takenCourse.days;\r\n\r\n\r\n                if (takenCourse.semester === semester && takenCourse.year === year){ // if TA is currently taking course they aren't eligible\r\n                    continue;\r\n                }\r\n                else{ // TA has taken this course in a previous semester, not current one \r\n                    if (takenCourseNumber === curCrse && (takenCourse.grade === 'A-' || takenCourse.grade === 'A' || takenCourse.grade === 'A+')){\r\n                        hasTakenClass = true;\r\n                    }\r\n                    else if (qualifiedCourses && QUALIFIED_COURSES[curCrse].includes(Number(takenCourseNumber))){\r\n                        hasTakenQualifiedClass = true;\r\n                    }\r\n                }\r\n                \r\n            }\r\n\r\n            if (hasTakenClass === true || hasTakenQualifiedClass === true){ // if TA has taken the class or taken an eligible class\r\n                for (let x = 0; x < curTA.length; x++){ // iterate through each class TA has taken\r\n                    const takingCourse = curTA[x];\r\n\r\n                    const daysOfTakingCourse = curTA[x].days\r\n\r\n                    if (takingCourse.semester === semester && takingCourse.year === year){ // if class that is being checked is happening this semester\r\n\r\n                        if (inClassNeeded == \"Y\\r\"){ //if current class requires TA to be present\r\n                            if (daysOfTakingCourse.includes(curClassDays) || curClassDays.includes(daysOfTakingCourse)){ // if current TA class and class happen on same days\r\n                                //console.log(daysOfTakingCourse, curClassDays);\r\n\r\n                                if (takingCourse.startTime != ''){\r\n                                \r\n                                    const class_TA_taking_start_time = parseInt(takingCourse.startTime); //start time of class that TA is taking current semester\r\n\r\n                                    const class_TA_taking_end_time = parseInt(takingCourse.stopTime); //stop time of class that TA is taking current semester\r\n                                    // check if current class and class TA is taking overlap in time at all\r\n                                    if ((curStartTime - class_TA_taking_start_time >= 0 && curStartTime - class_TA_taking_end_time <= 0) || (curEndTime - class_TA_taking_start_time >= 0 && curEndTime - class_TA_taking_end_time <= 0)){\r\n                                        timeEligible = false;\r\n                                    }\r\n                                    if ((class_TA_taking_start_time - curStartTime >= 0 && class_TA_taking_start_time - curEndTime <= 0) || (class_TA_taking_end_time - curStartTime >= 0 && class_TA_taking_end_time - curEndTime <= 0)){\r\n                                        timeEligible = false;\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        } \r\n                        else { // if TA does not need to be in class, they are timeEligible\r\n                            timeEligible = true;\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (timeEligible === true && (hasTakenClass === true || hasTakenQualifiedClass === true)){ // TA is time eligible and has taken class\r\n                const rowData = {\r\n                    CRN: curCRN,\r\n                    course_number: curCrse,\r\n                    taHours: taHours,\r\n                    totalEnrolled: enrollment,\r\n                    able_TA: curTAID,\r\n                };\r\n\r\n                // check if this CRN already has a row\r\n                let existingRow = class_list.find((r) => {\r\n                    return (\r\n                        r.CRN == rowData.CRN\r\n                    );\r\n                });\r\n\r\n                // if CRN already has row, add TA to list of eligible TAs\r\n                if (existingRow) {\r\n\r\n                    if (!existingRow.teacher_assistants.some((ta) => ta.able_TA == rowData.able_TA)){\r\n                        existingRow.teacher_assistants.push({\r\n                            able_TA: rowData.able_TA,\r\n                        });\r\n                    }                      \r\n                }\r\n\r\n                // Create new row for CRN if no row already exists for it\r\n                else {\r\n    \r\n                    const newRow = {\r\n                        CRN: rowData.CRN,\r\n                        course_number: rowData.course_number,\r\n                        taHours: taHours,\r\n                        totalEnrolled: enrollment,\r\n                        teacher_assistants: [\r\n                            {\r\n                                able_TA: rowData.able_TA,\r\n                            },\r\n                        ],\r\n                    };\r\n                    class_list.push(newRow);\r\n            }\r\n        }\r\n    }\r\n        // Check if a row has been created for the current courses CRN\r\n        let anyOptions = class_list.find((t) => {\r\n            return(\r\n                t.CRN == curCRN\r\n            )\r\n        });\r\n        if (!anyOptions) { //if no row has been made, this means no TA is eligible, therefore, create row with this information\r\n            const emptyData = {\r\n                CRN: curCRN,\r\n                course_number: curCrse,\r\n                taHours: taHours,\r\n                totalEnrolled: enrollment,\r\n                teacher_assistants: [\r\n                    {\r\n                    able_TA: \"No eligible Teacher Assistants\",\r\n                    },\r\n                ],\r\n            };\r\n            class_list.push(emptyData);\r\n        }\r\n\r\n    }\r\n\r\n    console.log(class_list);\r\n\r\n    setClassList(class_list);\r\n\r\n\r\n}\r\n\r\nuseEffect(() => {\r\n    handleEligibilityList();\r\n    setRunAlg(true)\r\n  }, []);\r\n\r\n\r\n  return null;\r\n\r\n}\r\n\r\nexport default CreateEligList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}