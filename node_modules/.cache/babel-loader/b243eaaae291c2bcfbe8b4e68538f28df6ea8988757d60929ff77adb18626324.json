{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport StableMarriage from \"./StableMarriage\";\nfunction CreateEligList(props) {\n  _s();\n  const [all_eligible_classes, setAllEligibleClasses] = useState([]);\n  const {\n    setRunAlg,\n    all_classes_attend,\n    all_TAs,\n    classList,\n    setClassList\n  } = props;\n  const year = \"2023\"; // need to make this user input at some point\n\n  const semester = \"Spring\";\n  const QUALIFIED_COURSES = {\n    1900: [1900, 3115, 3825, 4030, 4040, 4081, 4118, 4151, 4270, 4272, 4302, 4310, 4410, 4420, 4430, 4601, 4720, 4745, 4882, 6010, 6030, 6040, 6118, 6270, 6272, 6302, 6410, 7012, 7081, 7085, 7087, 7115, 7116, 7118, 7120, 7125, 7130, 7150, 7212, 7282, 7290, 7295, 7311, 7313, 7327, 7514, 7612, 7712, 7713, 7720, 7740, 7745, 7760, 7770, 7780, 7991, 7992, 7998, 7999, 8012, 8081, 8085, 8087, 8120, 8125, 8130, 8150, 8212, 8282, 8290, 8295, 8311, 8313, 8327, 8514, 8612, 8712, 8713, 8720, 8740, 8745, 8760, 8770, 8780, 8991, 8992, 8998, 8999],\n    3115: [3115, 7115, 8115, 7116, 8116],\n    3825: [3825, 7120, 8120, 7311, 8311, 7313, 8313],\n    4030: [4030, 6030, 7295, 8295, 7712, 8712, 7713, 8713, 7992, 8992],\n    4040: [4040, 6040, 7085, 8085, 7087, 8087],\n    4081: [4081, 7012, 8012, 7081, 8081],\n    4118: [4118, 6118, 7118, 8118],\n    4151: [4151, 7150, 8150],\n    4270: [4270, 6270, 7212, 8212, 7720, 8720],\n    4272: [4272, 6272, 7212, 8212],\n    4302: [4302, 6302, 7311, 8311],\n    4310: [4310, 7311, 8311],\n    4410: [4410, 6410, 7120, 8120, 7327, 8327, 7998, 8998],\n    4420: [4420, 7120, 8120, 7327, 8327, 7998, 8998],\n    4430: [4430, 7125, 8125],\n    4601: [4601, 7290, 8290, 7612, 8612, 7992, 8992],\n    4720: [4720, 7282, 8282, 7720, 8720, 7760, 8760, 7770, 8770],\n    4745: [4745, 7740, 8740, 7745, 8745],\n    4882: [4882, 7012, 8012, 7081, 8081, 7087, 8087],\n    6030: [7712, 7295, 7713, 7992, 8295, 8712, 8713, 8992],\n    6118: [7118, 8118],\n    6430: [8125, 8125],\n    7012: [7012, 8012],\n    7081: [7081, 8081],\n    7085: [7085, 8085],\n    7087: [7087, 8087],\n    7115: [7115, 8115],\n    7116: [7116, 8116],\n    7118: [7118, 8118],\n    7120: [7120, 8120],\n    7125: [7125, 8125],\n    7130: [7130, 8130],\n    7150: [7150, 8150],\n    7212: [7212, 8212],\n    7282: [7282, 8282],\n    7290: [7290, 8290],\n    7295: [7295, 8295],\n    7311: [7311, 8311],\n    7313: [7313, 8313],\n    7327: [7327, 8327],\n    7514: [7514, 8514],\n    7612: [7612, 8612],\n    7712: [7712, 8712],\n    7713: [7713, 8713],\n    7720: [7720, 8720],\n    7740: [7740, 8740],\n    7745: [7745, 8745],\n    7760: [7760, 8760],\n    7770: [7770, 8770],\n    7780: [7780, 8780],\n    7991: [7991, 8991],\n    7992: [7992, 8992],\n    7998: [7998, 8998],\n    7999: [7999, 8999]\n  };\n\n  //change times in all classes list to military time to match times in all\n  //TAs schedules\n  function convertStandardTimes(timeString) {\n    var timeArr = timeString.split(/:|\\s/);\n    var hours = parseInt(timeArr[0]);\n    var minutes = parseInt(timeArr[1]);\n    var amPm = timeArr[2].toLowerCase();\n\n    // Convert hours to military time\n    if (hours < 12 && amPm === \"pm\") {\n      hours += 12;\n    } else if (hours === 12 && amPm === \"am\") {\n      hours -= 12;\n    }\n\n    // Convert military time to string\n    var militaryHours = hours.toString();\n    var militaryMinutes = minutes.toString();\n    if (hours < 10) {\n      militaryHours = \"0\" + militaryHours;\n    }\n    if (minutes < 10) {\n      militaryMinutes = \"0\" + militaryMinutes;\n    }\n    var militaryTimeString = militaryHours + \"\" + militaryMinutes;\n    return militaryTimeString;\n  }\n\n  // Pushes the TA's eligibilty status to the class list (including a reason if they are not eligible)\n  function pushClassList(class_list, curTAID, curCRN, curCrse, curSec, taHours, enrollment, is_able, reasons) {\n    let rowData = {\n      CRN: curCRN,\n      course_number: curCrse,\n      Section: curSec,\n      taHours: taHours,\n      totalEnrolled: enrollment,\n      TAID: curTAID,\n      reason: reasons,\n      able: is_able\n    };\n\n    // check if this CRN already has a row\n    let existingRow = class_list.find(r => {\n      return r.CRN == \"\" + rowData.CRN;\n    });\n\n    // if CRN already has row, add TA to list\n    if (existingRow) {\n      if (!existingRow.teacher_assistants.some(ta => ta.TAID == rowData.TAID)) {\n        if (is_able) {\n          existingRow.teacher_assistants.push({\n            TAID: rowData.TAID,\n            able: true,\n            able_map: rowData.TAID\n          });\n        } else {\n          existingRow.teacher_assistants.push({\n            TAID: rowData.TAID,\n            able: false,\n            reason: rowData.reason\n          });\n        }\n      }\n      return;\n    }\n\n    // Create new row for CRN if no row already exists for it\n    let newRow;\n    if (is_able) {\n      newRow = {\n        CRN: rowData.CRN,\n        course_number: rowData.course_number,\n        Section: rowData.Section,\n        taHours: taHours,\n        totalEnrolled: enrollment,\n        teacher_assistants: [{\n          TAID: rowData.TAID,\n          able: true,\n          able_map: rowData.TAID\n        }]\n      };\n    } else {\n      newRow = {\n        CRN: rowData.CRN,\n        course_number: rowData.course_number,\n        Section: rowData.Section,\n        taHours: taHours,\n        totalEnrolled: enrollment,\n        teacher_assistants: [{\n          TAID: rowData.TAID,\n          able: false,\n          reason: rowData.reason\n        }]\n      };\n    }\n    class_list.push(newRow);\n  }\n  ;\n  function handleEligibilityList() {\n    const class_list = [];\n    for (let i = 0; i < all_classes_attend.length; i++) {\n      const curCRN = all_classes_attend[i].CRN; // current class being checked CRN\n      const curCrse = all_classes_attend[i].crse; //current class being checked Course Number\n      const curSec = all_classes_attend[i].sec; // Current Class Being Checked Section\n      const taHours = all_classes_attend[i].totalTAHours; // number of hours this class is good for\n      const enrollment = all_classes_attend[i].totalEnrolled; // total number of students enrolled in class\n\n      const inClassNeeded = all_classes_attend[i].required_attendance; // checks if current class requries TA to be in attendance\n      const curClassDays = all_classes_attend[i].days; //checks what days the class takes place\n\n      var curStartTime = 0;\n      var curEndTime = 0;\n      const curTime = all_classes_attend[i].time; // checks the time of current class that is being checked\n\n      if (curTime.includes(\"am\") || curTime.includes(\"pm\")) {\n        // convert time of class that is being offered for comparison\n        var timeArr = curTime.split(\"-\");\n        curStartTime = parseInt(convertStandardTimes(timeArr[0]));\n        curEndTime = parseInt(convertStandardTimes(timeArr[1]));\n      }\n      const qualifiedCourses = QUALIFIED_COURSES[curCrse]; // identify all courses that make TA eligible to teach current course that is being evaluated\n      //console.log(\"This is the current course:\", curCrse);\n\n      for (let j = 0; j < all_TAs.length; j++) {\n        const curTAID = all_TAs[j].uuid;\n        const curTACourses = all_TAs[j].courses; // list of every class that the current TA being evaluated has taken\n\n        // Determines if the TA was already scheduled to TA\n        let isTakingCourse = false;\n        let hastakenCourse = false;\n        let hastakenQualifiedCourse = false;\n        let gradeEligible = false;\n        let courseEligible = false;\n        let timeEligible = true;\n\n        // So, we loop over all of the courses that the TA has been to (no matter if they have taken it or are taking it)\n        for (let k = 0; k < curTACourses.length; k++) {\n          let takenCourse = curTACourses[k];\n          let takenCourseNumber = takenCourse.courseNumber;\n          let takenCourseCRN = takenCourse.CRN;\n          let takenCourseSec = takenCourse.sectionNumber;\n          let takenCourseTaHours = null;\n          let takenCourseEnrollment = null;\n          for (const classIndex in all_classes_attend) {\n            // Retrieves the course hours and enrollment number for the course that is being evaluated that a TA has taken. \n            if (all_classes_attend[classIndex].CRN == takenCourseCRN) {\n              takenCourseTaHours = all_classes_attend[classIndex].totalTAHours;\n              takenCourseEnrollment = all_classes_attend[classIndex].totalEnrolled;\n            }\n          }\n\n          // if TA is currently taking the course, they aren't eligible\n          if (takenCourse.semester === semester && takenCourse.year === year) {\n            // If the course that is being check that is currently being taken is the current course being checked for an eligible TA or if it is a qualifying course\n            if (takenCourseNumber == curCrse || qualifiedCourses && QUALIFIED_COURSES[curCrse].includes(Number(takenCourseNumber)) && curCrse != 1900) {\n              isTakingCourse = true;\n              pushClassList(class_list, curTAID, curCRN, curCrse, curSec, taHours, enrollment, false, 'Currently taking course');\n            }\n            // If the course is one of the ones in the list that needs a TA, then the reason is pushed into that course. \n            else if (all_classes_attend.map(classIndex => {\n              return classIndex.CRN;\n            }).includes(takenCourseCRN)) {\n              pushClassList(class_list, curTAID, takenCourseCRN, takenCourseNumber, takenCourseSec, takenCourseTaHours, takenCourseEnrollment, false, 'Currently taking course');\n            }\n          }\n          // TA has taken this course in a previous semester, not current one \n          else if (takenCourseNumber === curCrse) {\n            hastakenCourse = true;\n            if (takenCourse.grade === 'A-' || takenCourse.grade === 'A' || takenCourse.grade === 'A+') {\n              gradeEligible = true;\n              courseEligible = true;\n            } else {\n              pushClassList(class_list, curTAID, curCRN, curCrse, curSec, taHours, enrollment, false, `Insufficient Grade`);\n            }\n          }\n          // If the TA has taken a qualifying course in a previous semester\n          else if (qualifiedCourses && QUALIFIED_COURSES[curCrse].includes(Number(takenCourseNumber))) {\n            hastakenQualifiedCourse = true;\n            if (takenCourse.grade === 'A-' || takenCourse.grade === 'A' || takenCourse.grade === 'A+') {\n              gradeEligible = true;\n              courseEligible = true;\n            } else {\n              pushClassList(class_list, curTAID, curCRN, curCrse, curSec, taHours, enrollment, false, `Insufficient Grade`);\n            }\n          }\n        }\n        // If the TA has not taken any course or the course associated\n        if (hastakenQualifiedCourse == false && hastakenCourse == false && isTakingCourse == false) {\n          if (typeof qualifiedCourses == \"undefined\") {\n            pushClassList(class_list, curTAID, curCRN, curCrse, curSec, taHours, enrollment, false, `Lack of Prerequitie: COMP ${curCrse}`);\n          } else {\n            pushClassList(class_list, curTAID, curCRN, curCrse, curSec, taHours, enrollment, false, `Lack of Prerequitie: COMP ${qualifiedCourses.join(', ')}`);\n          }\n        } else if (courseEligible === true) {\n          // if TA has taken the class or taken an eligible class\n          for (let x = 0; x < curTACourses.length; x++) {\n            // iterate through each class the TA has taken\n            const takingCourse = curTACourses[x];\n            const daysOfTakingCourse = curTACourses[x].days;\n            if (takingCourse.semester === semester && takingCourse.year === year) {\n              // if class that is being checked is happening this semester\n\n              if (inClassNeeded == \"Y\\r\") {\n                //if current class requires TA to be present\n                if (daysOfTakingCourse.includes(curClassDays) || curClassDays.includes(daysOfTakingCourse)) {\n                  // if current TA class and class happen on same days\n                  //console.log(daysOfTakingCourse, curClassDays);\n\n                  if (takingCourse.startTime != '') {\n                    const class_TA_taking_start_time = parseInt(takingCourse.startTime); //start time of class that TA is taking current semester\n\n                    const class_TA_taking_end_time = parseInt(takingCourse.stopTime); //stop time of class that TA is taking current semester\n                    // check if current class and class that the TA is taking is overlapping in time at all\n                    if (curStartTime - class_TA_taking_start_time >= 0 && curStartTime - class_TA_taking_end_time <= 0 || curEndTime - class_TA_taking_start_time >= 0 && curEndTime - class_TA_taking_end_time <= 0) {\n                      timeEligible = false;\n                    } else if (class_TA_taking_start_time - curStartTime >= 0 && class_TA_taking_start_time - curEndTime <= 0 || class_TA_taking_end_time - curStartTime >= 0 && class_TA_taking_end_time - curEndTime <= 0) {\n                      timeEligible = false;\n                    }\n                  }\n                }\n              }\n            }\n          }\n          if (timeEligible) {\n            pushClassList(class_list, curTAID, curCRN, curCrse, curSec, taHours, enrollment, true, \"Eligible\");\n          } else {\n            pushClassList(class_list, curTAID, curCRN, curCrse, curSec, taHours, enrollment, false, \"Schedule Conflict\");\n          }\n        }\n      }\n    }\n    console.log(class_list);\n    setClassList(class_list);\n  }\n  useEffect(() => {\n    handleEligibilityList();\n    setRunAlg(true);\n  }, []);\n  return null;\n}\n_s(CreateEligList, \"FQU4mi7dGChfegbaBiKZ9HrvQYk=\");\n_c = CreateEligList;\nexport default CreateEligList;\nvar _c;\n$RefreshReg$(_c, \"CreateEligList\");","map":{"version":3,"names":["useState","useEffect","StableMarriage","CreateEligList","props","_s","all_eligible_classes","setAllEligibleClasses","setRunAlg","all_classes_attend","all_TAs","classList","setClassList","year","semester","QUALIFIED_COURSES","convertStandardTimes","timeString","timeArr","split","hours","parseInt","minutes","amPm","toLowerCase","militaryHours","toString","militaryMinutes","militaryTimeString","pushClassList","class_list","curTAID","curCRN","curCrse","curSec","taHours","enrollment","is_able","reasons","rowData","CRN","course_number","Section","totalEnrolled","TAID","reason","able","existingRow","find","r","teacher_assistants","some","ta","push","able_map","newRow","handleEligibilityList","i","length","crse","sec","totalTAHours","inClassNeeded","required_attendance","curClassDays","days","curStartTime","curEndTime","curTime","time","includes","qualifiedCourses","j","uuid","curTACourses","courses","isTakingCourse","hastakenCourse","hastakenQualifiedCourse","gradeEligible","courseEligible","timeEligible","k","takenCourse","takenCourseNumber","courseNumber","takenCourseCRN","takenCourseSec","sectionNumber","takenCourseTaHours","takenCourseEnrollment","classIndex","Number","map","grade","join","x","takingCourse","daysOfTakingCourse","startTime","class_TA_taking_start_time","class_TA_taking_end_time","stopTime","console","log","_c","$RefreshReg$"],"sources":["/Users/bhumipatel/workspace/row_align_side/src/components/CreateEligList.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport StableMarriage from \"./StableMarriage\";\r\n\r\n\r\n\r\nfunction CreateEligList(props){\r\n\r\n    const [all_eligible_classes, setAllEligibleClasses] = useState([]);\r\n\r\n    const { setRunAlg, all_classes_attend, all_TAs, classList, setClassList }  = props;\r\n \r\n    const year = \"2023\"; // need to make this user input at some point\r\n\r\n    const semester = \"Spring\";\r\n\r\n    const QUALIFIED_COURSES = {\r\n        1900: [1900, 3115, 3825, 4030, 4040, 4081, 4118, 4151, 4270, 4272, 4302, 4310, 4410, 4420, 4430, 4601, 4720, 4745, 4882, 6010, 6030, 6040, 6118, 6270, 6272, 6302, 6410, 7012, 7081, 7085, 7087, 7115, 7116, 7118, 7120, 7125, 7130, 7150, 7212, 7282, 7290, 7295, 7311, 7313, 7327, 7514, 7612, 7712, 7713, 7720, 7740, 7745, 7760, 7770, 7780, 7991, 7992, 7998, 7999, 8012, 8081, 8085, 8087, 8120, 8125, 8130, 8150, 8212, 8282, 8290, 8295, 8311, 8313, 8327, 8514, 8612, 8712, 8713, 8720, 8740, 8745, 8760, 8770, 8780, 8991, 8992, 8998, 8999],\r\n        3115: [3115, 7115, 8115, 7116, 8116],\r\n        3825: [3825, 7120, 8120, 7311, 8311, 7313, 8313],\r\n        4030: [4030, 6030, 7295, 8295, 7712, 8712, 7713, 8713, 7992, 8992],\r\n        4040: [4040, 6040, 7085, 8085, 7087, 8087],\r\n        4081: [4081, 7012, 8012, 7081, 8081],\r\n        4118: [4118, 6118, 7118, 8118],\r\n        4151: [4151, 7150, 8150],\r\n        4270: [4270, 6270, 7212, 8212, 7720, 8720],\r\n        4272: [4272, 6272, 7212, 8212],\r\n        4302: [4302, 6302, 7311, 8311],\r\n        4310: [4310, 7311, 8311],\r\n        4410: [4410, 6410, 7120, 8120, 7327, 8327, 7998, 8998],\r\n        4420: [4420, 7120, 8120, 7327, 8327, 7998, 8998],\r\n        4430: [4430, 7125, 8125],\r\n        4601: [4601, 7290, 8290, 7612, 8612, 7992, 8992],\r\n        4720: [4720, 7282, 8282, 7720, 8720, 7760, 8760, 7770, 8770],\r\n        4745: [4745, 7740, 8740, 7745, 8745],\r\n        4882: [4882, 7012, 8012, 7081, 8081, 7087, 8087],\r\n        6030: [7712, 7295, 7713, 7992, 8295, 8712, 8713, 8992 ],\r\n        6118: [7118, 8118],\r\n        6430: [8125, 8125],\r\n        7012: [7012, 8012],\r\n        7081: [7081, 8081],\r\n        7085: [7085, 8085],\r\n        7087: [7087, 8087],\r\n        7115: [7115, 8115],\r\n        7116: [7116, 8116],\r\n        7118: [7118, 8118],\r\n        7120: [7120, 8120],\r\n        7125: [7125, 8125],\r\n        7130: [7130, 8130],\r\n        7150: [7150, 8150],\r\n        7212: [7212, 8212],\r\n        7282: [7282, 8282],\r\n        7290: [7290, 8290],\r\n        7295: [7295, 8295],\r\n        7311: [7311, 8311],\r\n        7313: [7313, 8313],\r\n        7327: [7327, 8327],\r\n        7514: [7514, 8514],\r\n        7612: [7612, 8612],\r\n        7712: [7712, 8712],\r\n        7713: [7713, 8713],\r\n        7720: [7720, 8720],\r\n        7740: [7740, 8740],\r\n        7745: [7745, 8745],\r\n        7760: [7760, 8760],\r\n        7770: [7770, 8770],\r\n        7780: [7780, 8780],\r\n        7991: [7991, 8991],\r\n        7992: [7992, 8992],\r\n        7998: [7998, 8998],\r\n        7999: [7999, 8999],\r\n      };\r\n\r\n    //change times in all classes list to military time to match times in all\r\n    //TAs schedules\r\n    function convertStandardTimes(timeString){\r\n        var timeArr = timeString.split(/:|\\s/);\r\n        var hours = parseInt(timeArr[0]);\r\n        var minutes = parseInt(timeArr[1]);\r\n        var amPm = timeArr[2].toLowerCase();\r\n\r\n            // Convert hours to military time\r\n        if (hours < 12 && amPm === \"pm\") {\r\n            hours += 12;\r\n        } else if (hours === 12 && amPm === \"am\") {\r\n            hours -= 12;\r\n        }\r\n\r\n        // Convert military time to string\r\n        var militaryHours = hours.toString();\r\n        var militaryMinutes = minutes.toString();\r\n        if (hours < 10) {\r\n            militaryHours = \"0\" + militaryHours;\r\n        }\r\n        if (minutes < 10) {\r\n            militaryMinutes = \"0\" + militaryMinutes;\r\n        }\r\n        var militaryTimeString = militaryHours + \"\" + militaryMinutes;\r\n\r\n        return militaryTimeString;\r\n        \r\n    }\r\n    \r\n    // Pushes the TA's eligibilty status to the class list (including a reason if they are not eligible)\r\n    function pushClassList(class_list, curTAID, curCRN, curCrse, curSec, taHours, enrollment, is_able, reasons) {\r\n        let rowData = {\r\n            CRN: curCRN,\r\n            course_number: curCrse,\r\n            Section: curSec,\r\n            taHours: taHours,\r\n            totalEnrolled: enrollment,\r\n            TAID: curTAID,\r\n            reason: reasons,\r\n            able: is_able,\r\n        };\r\n\r\n        // check if this CRN already has a row\r\n        let existingRow = class_list.find((r) => {\r\n            return (\r\n                r.CRN == \"\" + rowData.CRN\r\n            );\r\n        });\r\n\r\n        // if CRN already has row, add TA to list\r\n        if (existingRow) {\r\n\r\n            if (!existingRow.teacher_assistants.some((ta) => ta.TAID == rowData.TAID)){\r\n\r\n                if (is_able) {\r\n                    existingRow.teacher_assistants.push({\r\n                        TAID: rowData.TAID,\r\n                        able: true,\r\n                        \r\n                        able_map: rowData.TAID\r\n                    });\r\n                }\r\n                else {\r\n                    existingRow.teacher_assistants.push({\r\n                        TAID: rowData.TAID,\r\n                        able: false,\r\n                        \r\n                        reason: rowData.reason\r\n                    });\r\n                }\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        // Create new row for CRN if no row already exists for it\r\n        let newRow\r\n\r\n        if (is_able) {\r\n            newRow = {\r\n                CRN: rowData.CRN,\r\n                course_number: rowData.course_number,\r\n                Section: rowData.Section,\r\n                taHours: taHours,\r\n                totalEnrolled: enrollment,\r\n                teacher_assistants: [\r\n                    {\r\n                        TAID: rowData.TAID,\r\n                        able: true,\r\n\r\n                        able_map: rowData.TAID,\r\n                    },\r\n                ],\r\n            };\r\n        }\r\n        else {\r\n            newRow = {\r\n                CRN: rowData.CRN,\r\n                course_number: rowData.course_number,\r\n                Section: rowData.Section,\r\n                taHours: taHours,\r\n                totalEnrolled: enrollment,\r\n                teacher_assistants: [\r\n                    {\r\n                        TAID: rowData.TAID,\r\n                        able: false,\r\n                        reason: rowData.reason\r\n                    },\r\n                ],\r\n            };\r\n        }\r\n        \r\n        class_list.push(newRow);\r\n    };\r\n\r\n\r\n    function handleEligibilityList(){\r\n      const class_list = [];\r\n\r\n    \r\n    for (let i = 0; i < all_classes_attend.length; i++){\r\n        const curCRN = all_classes_attend[i].CRN; // current class being checked CRN\r\n        const curCrse = all_classes_attend[i].crse; //current class being checked Course Number\r\n        const curSec = all_classes_attend[i].sec; // Current Class Being Checked Section\r\n        const taHours = all_classes_attend[i].totalTAHours; // number of hours this class is good for\r\n        const enrollment = all_classes_attend[i].totalEnrolled; // total number of students enrolled in class\r\n\r\n        const inClassNeeded = all_classes_attend[i].required_attendance; // checks if current class requries TA to be in attendance\r\n        const curClassDays = all_classes_attend[i].days //checks what days the class takes place\r\n\r\n        var curStartTime = 0;\r\n        var curEndTime = 0;\r\n\r\n        const curTime = all_classes_attend[i].time; // checks the time of current class that is being checked\r\n\r\n        if (curTime.includes(\"am\") || curTime.includes(\"pm\")) { // convert time of class that is being offered for comparison\r\n            var timeArr = curTime.split(\"-\");\r\n            curStartTime = parseInt(convertStandardTimes(timeArr[0]))\r\n            curEndTime = parseInt(convertStandardTimes(timeArr[1]))\r\n        }\r\n\r\n        const qualifiedCourses = QUALIFIED_COURSES[curCrse]; // identify all courses that make TA eligible to teach current course that is being evaluated\r\n        //console.log(\"This is the current course:\", curCrse);\r\n\r\n        for (let j = 0; j < all_TAs.length; j++){\r\n            const curTAID = all_TAs[j].uuid;\r\n            const curTACourses = all_TAs[j].courses; // list of every class that the current TA being evaluated has taken\r\n            \r\n            // Determines if the TA was already scheduled to TA\r\n            let isTakingCourse = false;\r\n            let hastakenCourse = false;\r\n            let hastakenQualifiedCourse = false;\r\n            let gradeEligible = false;\r\n            let courseEligible = false;\r\n            let timeEligible = true;\r\n            \r\n            // So, we loop over all of the courses that the TA has been to (no matter if they have taken it or are taking it)\r\n            for (let k = 0; k < curTACourses.length; k++){\r\n                let takenCourse = curTACourses[k];\r\n                let takenCourseNumber = takenCourse.courseNumber;\r\n                let takenCourseCRN = takenCourse.CRN;\r\n                let takenCourseSec = takenCourse.sectionNumber;\r\n                let takenCourseTaHours = null;\r\n                let takenCourseEnrollment = null;\r\n\r\n                for (const classIndex in all_classes_attend) {\r\n                    // Retrieves the course hours and enrollment number for the course that is being evaluated that a TA has taken. \r\n                    if (all_classes_attend[classIndex].CRN == takenCourseCRN) {\r\n                        takenCourseTaHours = all_classes_attend[classIndex].totalTAHours;\r\n                        takenCourseEnrollment = all_classes_attend[classIndex].totalEnrolled;\r\n                    }\r\n                }\r\n\r\n                // if TA is currently taking the course, they aren't eligible\r\n                if (takenCourse.semester === semester && takenCourse.year === year){\r\n                    // If the course that is being check that is currently being taken is the current course being checked for an eligible TA or if it is a qualifying course\r\n                    if (takenCourseNumber == curCrse || qualifiedCourses && QUALIFIED_COURSES[curCrse].includes(Number(takenCourseNumber)) && curCrse != 1900) {\r\n                        isTakingCourse = true;\r\n                        pushClassList(class_list, curTAID, curCRN, curCrse, curSec, taHours, enrollment, false, 'Currently taking course');\r\n                    }\r\n                    // If the course is one of the ones in the list that needs a TA, then the reason is pushed into that course. \r\n                    else if (all_classes_attend.map(classIndex => {return classIndex.CRN}).includes(takenCourseCRN)) {\r\n                        pushClassList(class_list, curTAID, takenCourseCRN, takenCourseNumber, takenCourseSec, takenCourseTaHours, takenCourseEnrollment, false, 'Currently taking course');\r\n                    }\r\n                    \r\n                }\r\n                // TA has taken this course in a previous semester, not current one \r\n                else if (takenCourseNumber === curCrse){\r\n                    hastakenCourse = true;\r\n                    if (takenCourse.grade === 'A-' || takenCourse.grade === 'A' || takenCourse.grade === 'A+') {\r\n                        gradeEligible = true;\r\n                        courseEligible = true;\r\n                    }\r\n                    else {\r\n                        pushClassList(class_list, curTAID, curCRN, curCrse, curSec, taHours, enrollment, false, `Insufficient Grade`);\r\n                    }\r\n                }\r\n                // If the TA has taken a qualifying course in a previous semester\r\n                else if (qualifiedCourses && QUALIFIED_COURSES[curCrse].includes(Number(takenCourseNumber))) {\r\n                    hastakenQualifiedCourse = true\r\n                    if (takenCourse.grade === 'A-' || takenCourse.grade === 'A' || takenCourse.grade === 'A+') {\r\n                        gradeEligible = true;\r\n                        courseEligible = true;\r\n                    }\r\n                    else { \r\n                        pushClassList(class_list, curTAID, curCRN, curCrse, curSec, taHours, enrollment, false, `Insufficient Grade`);\r\n                    }\r\n                }\r\n            }\r\n            // If the TA has not taken any course or the course associated\r\n            if (hastakenQualifiedCourse == false && hastakenCourse == false && isTakingCourse == false) {\r\n                if (typeof qualifiedCourses == \"undefined\") {\r\n                    pushClassList(class_list, curTAID, curCRN, curCrse, curSec, taHours, enrollment, false, `Lack of Prerequitie: COMP ${curCrse}`);\r\n                }\r\n                else {\r\n                    pushClassList(class_list, curTAID, curCRN, curCrse, curSec, taHours, enrollment, false, `Lack of Prerequitie: COMP ${qualifiedCourses.join(', ')}`);\r\n                }   \r\n            }\r\n            else if (courseEligible === true){ // if TA has taken the class or taken an eligible class\r\n                for (let x = 0; x < curTACourses.length; x++){ // iterate through each class the TA has taken\r\n                    const takingCourse = curTACourses[x];\r\n\r\n                    const daysOfTakingCourse = curTACourses[x].days\r\n\r\n                    if (takingCourse.semester === semester && takingCourse.year === year){ // if class that is being checked is happening this semester\r\n\r\n                        if (inClassNeeded == \"Y\\r\"){ //if current class requires TA to be present\r\n                            if (daysOfTakingCourse.includes(curClassDays) || curClassDays.includes(daysOfTakingCourse)){ // if current TA class and class happen on same days\r\n                                //console.log(daysOfTakingCourse, curClassDays);\r\n\r\n                                if (takingCourse.startTime != ''){\r\n                                \r\n                                    const class_TA_taking_start_time = parseInt(takingCourse.startTime); //start time of class that TA is taking current semester\r\n\r\n                                    const class_TA_taking_end_time = parseInt(takingCourse.stopTime); //stop time of class that TA is taking current semester\r\n                                    // check if current class and class that the TA is taking is overlapping in time at all\r\n                                    if ((curStartTime - class_TA_taking_start_time >= 0 && curStartTime - class_TA_taking_end_time <= 0) || (curEndTime - class_TA_taking_start_time >= 0 && curEndTime - class_TA_taking_end_time <= 0)){\r\n                                        timeEligible = false;\r\n                                    }\r\n                                    else if ((class_TA_taking_start_time - curStartTime >= 0 && class_TA_taking_start_time - curEndTime <= 0) || (class_TA_taking_end_time - curStartTime >= 0 && class_TA_taking_end_time - curEndTime <= 0)){\r\n                                        timeEligible = false;\r\n                                    }\r\n                                }\r\n                            }\r\n                        } \r\n                    }\r\n                }\r\n                if (timeEligible) {\r\n                    pushClassList(class_list, curTAID, curCRN, curCrse, curSec, taHours, enrollment, true, \"Eligible\");\r\n                }\r\n                else {\r\n                    pushClassList(class_list, curTAID, curCRN, curCrse, curSec, taHours, enrollment, false, \"Schedule Conflict\");\r\n                }\r\n            }    \r\n        }\r\n    }\r\n    console.log(class_list);\r\n    setClassList(class_list);\r\n}\r\n\r\nuseEffect(() => {\r\n    handleEligibilityList();\r\n    setRunAlg(true)\r\n  }, []);\r\n\r\n\r\n  return null;\r\n\r\n}\r\n\r\nexport default CreateEligList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}