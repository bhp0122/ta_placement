{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport StableMarriage from \"./StableMarriage\";\nfunction CreateEligList(props) {\n  _s();\n  const [all_eligible_classes, setAllEligibleClasses] = useState([]);\n  const {\n    setRunAlg,\n    all_classes_attend,\n    all_TAs,\n    classList,\n    setClassList\n  } = props;\n  const year = \"2023\"; // need to make this user input at some point\n\n  const semester = \"Spring\";\n  const QUALIFIED_COURSES = {\n    1900: [1900, 3115, 3825, 4030, 4040, 4081, 4118, 4151, 4270, 4272, 4302, 4310, 4410, 4420, 4430, 4601, 4720, 4745, 4882, 6010, 6030, 6040, 6118, 6270, 6272, 6302, 6410, 7012, 7081, 7085, 7087, 7115, 7116, 7118, 7120, 7125, 7130, 7150, 7212, 7282, 7290, 7295, 7311, 7313, 7327, 7514, 7612, 7712, 7713, 7720, 7740, 7745, 7760, 7770, 7780, 7991, 7992, 7998, 7999, 8012, 8081, 8085, 8087, 8120, 8125, 8130, 8150, 8212, 8282, 8290, 8295, 8311, 8313, 8327, 8514, 8612, 8712, 8713, 8720, 8740, 8745, 8760, 8770, 8780, 8991, 8992, 8998, 8999],\n    3115: [3115, 7115, 8115, 7116, 8116],\n    3825: [3825, 7120, 8120, 7311, 8311, 7313, 8313],\n    4030: [4030, 6030, 7295, 8295, 7712, 8712, 7713, 8713, 7992, 8992],\n    4040: [4040, 6040, 7085, 8085, 7087, 8087],\n    4081: [4081, 7012, 8012, 7081, 8081],\n    4118: [4118, 6118, 7118, 8118],\n    4151: [4151, 7150, 8150],\n    4270: [4270, 6270, 7212, 8212, 7720, 8720],\n    4272: [4272, 6272, 7212, 8212],\n    4302: [4302, 6302, 7311, 8311],\n    4310: [4310, 7311, 8311],\n    4410: [4410, 6410, 7120, 8120, 7327, 8327, 7998, 8998],\n    4420: [4420, 7120, 8120, 7327, 8327, 7998, 8998],\n    4430: [4430, 7125, 8125],\n    4601: [4601, 7290, 8290, 7612, 8612, 7992, 8992],\n    4720: [4720, 7282, 8282, 7720, 8720, 7760, 8760, 7770, 8770],\n    4745: [4745, 7740, 8740, 7745, 8745],\n    4882: [4882, 7012, 8012, 7081, 8081, 7087, 8087],\n    6030: [7712, 7295, 7713, 7992, 8295, 8712, 8713, 8992],\n    6118: [7118, 8118],\n    6430: [8125, 8125],\n    7012: [7012, 8012],\n    7081: [7081, 8081],\n    7085: [7085, 8085],\n    7087: [7087, 8087],\n    7115: [7115, 8115],\n    7116: [7116, 8116],\n    7118: [7118, 8118],\n    7120: [7120, 8120],\n    7125: [7125, 8125],\n    7130: [7130, 8130],\n    7150: [7150, 8150],\n    7212: [7212, 8212],\n    7282: [7282, 8282],\n    7290: [7290, 8290],\n    7295: [7295, 8295],\n    7311: [7311, 8311],\n    7313: [7313, 8313],\n    7327: [7327, 8327],\n    7514: [7514, 8514],\n    7612: [7612, 8612],\n    7712: [7712, 8712],\n    7713: [7713, 8713],\n    7720: [7720, 8720],\n    7740: [7740, 8740],\n    7745: [7745, 8745],\n    7760: [7760, 8760],\n    7770: [7770, 8770],\n    7780: [7780, 8780],\n    7991: [7991, 8991],\n    7992: [7992, 8992],\n    7998: [7998, 8998],\n    7999: [7999, 8999]\n  };\n\n  //change times in all classes list to military time to match times in all\n  //TAs schedules\n  function convertStandardTimes(timeString) {\n    var timeArr = timeString.split(/:|\\s/);\n    var hours = parseInt(timeArr[0]);\n    var minutes = parseInt(timeArr[1]);\n    var amPm = timeArr[2].toLowerCase();\n\n    // Convert hours to military time\n    if (hours < 12 && amPm === \"pm\") {\n      hours += 12;\n    } else if (hours === 12 && amPm === \"am\") {\n      hours -= 12;\n    }\n\n    // Convert military time to string\n    var militaryHours = hours.toString();\n    var militaryMinutes = minutes.toString();\n    if (hours < 10) {\n      militaryHours = \"0\" + militaryHours;\n    }\n    if (minutes < 10) {\n      militaryMinutes = \"0\" + militaryMinutes;\n    }\n    var militaryTimeString = militaryHours + \"\" + militaryMinutes;\n    return militaryTimeString;\n  }\n\n  // Pushes the TA's eligibilty status to the class list (including a reason if they are not eligible)\n  function pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, is_able, reasons) {\n    let rowData = {\n      CRN: curCRN,\n      course_number: curCrse,\n      taHours: taHours,\n      totalEnrolled: enrollment,\n      TAID: curTAID,\n      reason: reasons,\n      able: is_able\n    };\n\n    // check if this CRN already has a row\n    let existingRow = class_list.find(r => {\n      return r.CRN == \"\" + rowData.CRN;\n    });\n\n    // if CRN already has row, add TA to list\n    if (existingRow) {\n      if (!existingRow.teacher_assistants.some(ta => ta.TAID == rowData.TAID)) {\n        if (is_able) {\n          existingRow.teacher_assistants.push({\n            TAID: rowData.TAID,\n            able: true,\n            able_map: rowData.TAID\n          });\n        } else {\n          existingRow.teacher_assistants.push({\n            TAID: rowData.TAID,\n            able: false,\n            reason: rowData.reason\n          });\n        }\n      }\n      return;\n    }\n\n    // Create new row for CRN if no row already exists for it\n    let newRow;\n    if (is_able) {\n      newRow = {\n        CRN: rowData.CRN,\n        course_number: rowData.course_number,\n        taHours: taHours,\n        totalEnrolled: enrollment,\n        teacher_assistants: [{\n          TAID: rowData.TAID,\n          able: true,\n          able_map: rowData.TAID\n        }]\n      };\n    } else {\n      newRow = {\n        CRN: rowData.CRN,\n        course_number: rowData.course_number,\n        taHours: taHours,\n        totalEnrolled: enrollment,\n        teacher_assistants: [{\n          TAID: rowData.TAID,\n          able: false,\n          reason: rowData.reason\n        }]\n      };\n    }\n    class_list.push(newRow);\n  }\n  ;\n  function handleEligibilityList() {\n    const class_list = [];\n    for (let i = 0; i < all_classes_attend.length; i++) {\n      const curCRN = all_classes_attend[i].CRN; // current class being checked CRN\n      const curCrse = all_classes_attend[i].crse; //current class being checked Course Number\n      const taHours = all_classes_attend[i].totalTAHours; // number of hours this class is good for\n      const enrollment = all_classes_attend[i].totalEnrolled; // total number of students enrolled in class\n\n      const inClassNeeded = all_classes_attend[i].required_attendance; // checks if current class requries TA to be in attendance\n      const curClassDays = all_classes_attend[i].days; //checks what days the class takes place\n\n      var curStartTime = 0;\n      var curEndTime = 0;\n      const curTime = all_classes_attend[i].time; // checks the time of current class that is being checked\n\n      if (curTime.includes(\"am\") || curTime.includes(\"pm\")) {\n        // convert time of class that is being offered for comparison\n        var timeArr = curTime.split(\"-\");\n        curStartTime = parseInt(convertStandardTimes(timeArr[0]));\n        curEndTime = parseInt(convertStandardTimes(timeArr[1]));\n      }\n      const qualifiedCourses = QUALIFIED_COURSES[curCrse]; // identify all courses that make TA eligible to teach current course that is being evaluated\n      //console.log(\"This is the current course:\", curCrse);\n\n      for (let j = 0; j < all_TAs.length; j++) {\n        const curTAID = all_TAs[j].uuid;\n        const curTACourses = all_TAs[j].courses; // list of every class that the current TA being evaluated has taken\n\n        // Determines if the TA was already scheduled to TA\n\n        let timeEligible = true;\n        let finishedCourse = true;\n        let courseEligible = false;\n\n        // The TA is eligible for this course if their grade for this course is A- or higher, or they took a qualifying course with a grade of -A or higher\n        // So, we loop over all of the courses that the TA has been to (no matter if they have taken it or are taking it)\n        for (let k = 0; k < curTACourses.length; k++) {\n          let takenCourse = curTACourses[k];\n          let takenCourseNumber = takenCourse.courseNumber;\n          let gradeEligible = takenCourse.grade === 'A-' || takenCourse.grade === 'A' || takenCourse.grade === 'A+';\n\n          // if TA is currently taking the course, they aren't eligible\n          if (takenCourse.semester === semester && takenCourse.year === year) {\n            finishedCourse = false;\n            continue;\n          }\n          let hasTakenClass = takenCourseNumber === curCrse;\n\n          // TA has taken this course in a previous semester, not current one \n          if (hasTakenClass && gradeEligible) {\n            courseEligible = true;\n            continue;\n          }\n          let hasTakenQualifiedClass = qualifiedCourses && QUALIFIED_COURSES[curCrse].includes(Number(takenCourseNumber));\n\n          // If the TA has taken a qualifying course in a previous semester\n          if (hasTakenQualifiedClass && gradeEligible) {\n            courseEligible = true;\n            continue;\n          }\n\n          // If we get here, then \"gradeEligible\" should be false\n          // So, we run one more check for a course match and a qualifying course match before sending a conflict reason\n          if (hasTakenClass) {\n            pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, `Low grade (${takenCourse.grade}) in course (COMP ${curCrse})`);\n            continue;\n          }\n          if (hasTakenQualifiedClass) {\n            pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, `Low grade (${takenCourse.grade}) in course (COMP ${curCrse})`);\n            continue;\n          }\n\n          // If we get here, then the TA hasn't taken the matched course, nor any qualifying course\n          if (!qualifiedCourses) {\n            pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, `COMP ${curCrse} not taken`);\n            continue;\n          }\n          let unmatchedClassesReason = `COMP`;\n          for (let index = 0; index < qualifiedCourses.length; index++) {\n            let qualifedCourse = qualifiedCourses[index];\n            if (index - 1 === qualifiedCourses.length) {\n              unmatchedClassesReason += `, and ${qualifedCourse} not taken`;\n            }\n            unmatchedClassesReason += `, ${qualifedCourse}`;\n          }\n          pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, unmatchedClassesReason);\n        }\n        if (courseEligible === true) {\n          // if TA has taken the class or taken an eligible class\n          for (let x = 0; x < curTACourses.length; x++) {\n            // iterate through each class the TA has taken\n            const takingCourse = curTACourses[x];\n            const daysOfTakingCourse = curTACourses[x].days;\n            if (takingCourse.semester === semester && takingCourse.year === year) {\n              // if class that is being checked is happening this semester\n\n              if (inClassNeeded == \"Y\\r\") {\n                //if current class requires TA to be present\n                if (daysOfTakingCourse.includes(curClassDays) || curClassDays.includes(daysOfTakingCourse)) {\n                  // if current TA class and class happen on same days\n                  //console.log(daysOfTakingCourse, curClassDays);\n\n                  if (takingCourse.startTime != '') {\n                    const class_TA_taking_start_time = parseInt(takingCourse.startTime); //start time of class that TA is taking current semester\n\n                    const class_TA_taking_end_time = parseInt(takingCourse.stopTime); //stop time of class that TA is taking current semester\n                    // check if current class and class that the TA is taking is overlapping in time at all\n                    if (curStartTime - class_TA_taking_start_time >= 0 && curStartTime - class_TA_taking_end_time <= 0 || curEndTime - class_TA_taking_start_time >= 0 && curEndTime - class_TA_taking_end_time <= 0) {\n                      timeEligible = false;\n                    } else if (class_TA_taking_start_time - curStartTime >= 0 && class_TA_taking_start_time - curEndTime <= 0 || class_TA_taking_end_time - curStartTime >= 0 && class_TA_taking_end_time - curEndTime <= 0) {\n                      timeEligible = false;\n                    }\n                  }\n                }\n              } else {\n                // if TA does not need to be in class, they are timeEligible\n                timeEligible = true;\n              }\n            }\n          }\n        }\n        if (timeEligible === false) {\n          pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, \"Doesn't have the time required to TA for this course\");\n          continue;\n        }\n\n        // At this point, the TA is time eligible, and has taken the class or taken an eligible class with a high enough grade\n\n        // Since \"timeEligible\" defaults to true, if \"courseEligible\" is false, the above if statement will be skipped\n        // \"timeEligible\" should not default to false (the if statement below should not be removed) since a failed eligiblity check will improperly enter the above if statement\n        // Instead, an error ineligibly reason is given at the end of the loop\n        if (courseEligible === true) {\n          pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, true, \"not applicable; TA is eligible\");\n          continue;\n        }\n\n        // As stated above, if we get here, we don't know what happened\n        pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, \"TA is not eligible for an unknown reason?\");\n      }\n    }\n    console.log(class_list);\n    setClassList(class_list);\n  }\n  useEffect(() => {\n    handleEligibilityList();\n    setRunAlg(true);\n  }, []);\n  return null;\n}\n_s(CreateEligList, \"FQU4mi7dGChfegbaBiKZ9HrvQYk=\");\n_c = CreateEligList;\nexport default CreateEligList;\nvar _c;\n$RefreshReg$(_c, \"CreateEligList\");","map":{"version":3,"names":["useState","useEffect","StableMarriage","CreateEligList","props","_s","all_eligible_classes","setAllEligibleClasses","setRunAlg","all_classes_attend","all_TAs","classList","setClassList","year","semester","QUALIFIED_COURSES","convertStandardTimes","timeString","timeArr","split","hours","parseInt","minutes","amPm","toLowerCase","militaryHours","toString","militaryMinutes","militaryTimeString","pushClassList","class_list","curTAID","curCRN","curCrse","taHours","enrollment","is_able","reasons","rowData","CRN","course_number","totalEnrolled","TAID","reason","able","existingRow","find","r","teacher_assistants","some","ta","push","able_map","newRow","handleEligibilityList","i","length","crse","totalTAHours","inClassNeeded","required_attendance","curClassDays","days","curStartTime","curEndTime","curTime","time","includes","qualifiedCourses","j","uuid","curTACourses","courses","timeEligible","finishedCourse","courseEligible","k","takenCourse","takenCourseNumber","courseNumber","gradeEligible","grade","hasTakenClass","hasTakenQualifiedClass","Number","unmatchedClassesReason","index","qualifedCourse","x","takingCourse","daysOfTakingCourse","startTime","class_TA_taking_start_time","class_TA_taking_end_time","stopTime","console","log","_c","$RefreshReg$"],"sources":["/home/nellexvul/GitRepos/TABS/src/components/CreateEligList.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport StableMarriage from \"./StableMarriage\";\r\n\r\n\r\n\r\nfunction CreateEligList(props){\r\n\r\n    const [all_eligible_classes, setAllEligibleClasses] = useState([]);\r\n\r\n    const { setRunAlg, all_classes_attend, all_TAs, classList, setClassList }  = props;\r\n\r\n    const year = \"2023\"; // need to make this user input at some point\r\n\r\n    const semester = \"Spring\";\r\n\r\n    const QUALIFIED_COURSES = {\r\n        1900: [1900, 3115, 3825, 4030, 4040, 4081, 4118, 4151, 4270, 4272, 4302, 4310, 4410, 4420, 4430, 4601, 4720, 4745, 4882, 6010, 6030, 6040, 6118, 6270, 6272, 6302, 6410, 7012, 7081, 7085, 7087, 7115, 7116, 7118, 7120, 7125, 7130, 7150, 7212, 7282, 7290, 7295, 7311, 7313, 7327, 7514, 7612, 7712, 7713, 7720, 7740, 7745, 7760, 7770, 7780, 7991, 7992, 7998, 7999, 8012, 8081, 8085, 8087, 8120, 8125, 8130, 8150, 8212, 8282, 8290, 8295, 8311, 8313, 8327, 8514, 8612, 8712, 8713, 8720, 8740, 8745, 8760, 8770, 8780, 8991, 8992, 8998, 8999],\r\n        3115: [3115, 7115, 8115, 7116, 8116],\r\n        3825: [3825, 7120, 8120, 7311, 8311, 7313, 8313],\r\n        4030: [4030, 6030, 7295, 8295, 7712, 8712, 7713, 8713, 7992, 8992],\r\n        4040: [4040, 6040, 7085, 8085, 7087, 8087],\r\n        4081: [4081, 7012, 8012, 7081, 8081],\r\n        4118: [4118, 6118, 7118, 8118],\r\n        4151: [4151, 7150, 8150],\r\n        4270: [4270, 6270, 7212, 8212, 7720, 8720],\r\n        4272: [4272, 6272, 7212, 8212],\r\n        4302: [4302, 6302, 7311, 8311],\r\n        4310: [4310, 7311, 8311],\r\n        4410: [4410, 6410, 7120, 8120, 7327, 8327, 7998, 8998],\r\n        4420: [4420, 7120, 8120, 7327, 8327, 7998, 8998],\r\n        4430: [4430, 7125, 8125],\r\n        4601: [4601, 7290, 8290, 7612, 8612, 7992, 8992],\r\n        4720: [4720, 7282, 8282, 7720, 8720, 7760, 8760, 7770, 8770],\r\n        4745: [4745, 7740, 8740, 7745, 8745],\r\n        4882: [4882, 7012, 8012, 7081, 8081, 7087, 8087],\r\n        6030: [7712, 7295, 7713, 7992, 8295, 8712, 8713, 8992 ],\r\n        6118: [7118, 8118],\r\n        6430: [8125, 8125],\r\n        7012: [7012, 8012],\r\n        7081: [7081, 8081],\r\n        7085: [7085, 8085],\r\n        7087: [7087, 8087],\r\n        7115: [7115, 8115],\r\n        7116: [7116, 8116],\r\n        7118: [7118, 8118],\r\n        7120: [7120, 8120],\r\n        7125: [7125, 8125],\r\n        7130: [7130, 8130],\r\n        7150: [7150, 8150],\r\n        7212: [7212, 8212],\r\n        7282: [7282, 8282],\r\n        7290: [7290, 8290],\r\n        7295: [7295, 8295],\r\n        7311: [7311, 8311],\r\n        7313: [7313, 8313],\r\n        7327: [7327, 8327],\r\n        7514: [7514, 8514],\r\n        7612: [7612, 8612],\r\n        7712: [7712, 8712],\r\n        7713: [7713, 8713],\r\n        7720: [7720, 8720],\r\n        7740: [7740, 8740],\r\n        7745: [7745, 8745],\r\n        7760: [7760, 8760],\r\n        7770: [7770, 8770],\r\n        7780: [7780, 8780],\r\n        7991: [7991, 8991],\r\n        7992: [7992, 8992],\r\n        7998: [7998, 8998],\r\n        7999: [7999, 8999],\r\n      };\r\n\r\n        //change times in all classes list to military time to match times in all\r\n        //TAs schedules\r\n        function convertStandardTimes(timeString){\r\n            var timeArr = timeString.split(/:|\\s/);\r\n            var hours = parseInt(timeArr[0]);\r\n            var minutes = parseInt(timeArr[1]);\r\n            var amPm = timeArr[2].toLowerCase();\r\n\r\n              // Convert hours to military time\r\n            if (hours < 12 && amPm === \"pm\") {\r\n                hours += 12;\r\n            } else if (hours === 12 && amPm === \"am\") {\r\n                hours -= 12;\r\n            }\r\n\r\n            // Convert military time to string\r\n            var militaryHours = hours.toString();\r\n            var militaryMinutes = minutes.toString();\r\n            if (hours < 10) {\r\n                militaryHours = \"0\" + militaryHours;\r\n            }\r\n            if (minutes < 10) {\r\n                militaryMinutes = \"0\" + militaryMinutes;\r\n            }\r\n            var militaryTimeString = militaryHours + \"\" + militaryMinutes;\r\n\r\n            return militaryTimeString;\r\n            \r\n        }\r\n    \r\n    // Pushes the TA's eligibilty status to the class list (including a reason if they are not eligible)\r\n    function pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, is_able, reasons) {\r\n        let rowData = {\r\n            CRN: curCRN,\r\n            course_number: curCrse,\r\n            taHours: taHours,\r\n            totalEnrolled: enrollment,\r\n            TAID: curTAID,\r\n            reason: reasons,\r\n            able: is_able,\r\n        };\r\n\r\n        // check if this CRN already has a row\r\n        let existingRow = class_list.find((r) => {\r\n            return (\r\n                r.CRN == \"\" + rowData.CRN\r\n            );\r\n        });\r\n\r\n        // if CRN already has row, add TA to list\r\n        if (existingRow) {\r\n\r\n            if (!existingRow.teacher_assistants.some((ta) => ta.TAID == rowData.TAID)){\r\n\r\n                if (is_able) {\r\n                    existingRow.teacher_assistants.push({\r\n                        TAID: rowData.TAID,\r\n                        able: true,\r\n                        \r\n                        able_map: rowData.TAID\r\n                    });\r\n                }\r\n                else {\r\n                    existingRow.teacher_assistants.push({\r\n                        TAID: rowData.TAID,\r\n                        able: false,\r\n                        \r\n                        reason: rowData.reason\r\n                    });\r\n                }\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        // Create new row for CRN if no row already exists for it\r\n        let newRow\r\n\r\n        if (is_able) {\r\n            newRow = {\r\n                CRN: rowData.CRN,\r\n                course_number: rowData.course_number,\r\n                taHours: taHours,\r\n                totalEnrolled: enrollment,\r\n                teacher_assistants: [\r\n                    {\r\n                        TAID: rowData.TAID,\r\n                        able: true,\r\n\r\n                        able_map: rowData.TAID,\r\n                    },\r\n                ],\r\n            };\r\n        }\r\n        else {\r\n            newRow = {\r\n                CRN: rowData.CRN,\r\n                course_number: rowData.course_number,\r\n                taHours: taHours,\r\n                totalEnrolled: enrollment,\r\n                teacher_assistants: [\r\n                    {\r\n                        TAID: rowData.TAID,\r\n                        able: false,\r\n                        reason: rowData.reason\r\n                    },\r\n                ],\r\n            };\r\n        }\r\n        \r\n        class_list.push(newRow);\r\n    };\r\n\r\n\r\n    function handleEligibilityList(){\r\n      const class_list = [];\r\n\r\n\r\n    for (let i = 0; i < all_classes_attend.length; i++){\r\n\r\n        const curCRN = all_classes_attend[i].CRN; // current class being checked CRN\r\n        const curCrse = all_classes_attend[i].crse; //current class being checked Course Number\r\n        const taHours = all_classes_attend[i].totalTAHours; // number of hours this class is good for\r\n        const enrollment = all_classes_attend[i].totalEnrolled; // total number of students enrolled in class\r\n\r\n        const inClassNeeded = all_classes_attend[i].required_attendance; // checks if current class requries TA to be in attendance\r\n        const curClassDays = all_classes_attend[i].days //checks what days the class takes place\r\n\r\n        \r\n\r\n\r\n        var curStartTime = 0;\r\n        var curEndTime = 0;\r\n\r\n\r\n       \r\n        const curTime = all_classes_attend[i].time; // checks the time of current class that is being checked\r\n\r\n        if (curTime.includes(\"am\") || curTime.includes(\"pm\")) { // convert time of class that is being offered for comparison\r\n            var timeArr = curTime.split(\"-\");\r\n            curStartTime = parseInt(convertStandardTimes(timeArr[0]))\r\n            curEndTime = parseInt(convertStandardTimes(timeArr[1]))\r\n        }\r\n\r\n        const qualifiedCourses = QUALIFIED_COURSES[curCrse]; // identify all courses that make TA eligible to teach current course that is being evaluated\r\n        //console.log(\"This is the current course:\", curCrse);\r\n\r\n        for (let j = 0; j < all_TAs.length; j++){\r\n            const curTAID = all_TAs[j].uuid;\r\n            const curTACourses = all_TAs[j].courses; // list of every class that the current TA being evaluated has taken\r\n\r\n            // Determines if the TA was already scheduled to TA\r\n\r\n\r\n            let timeEligible = true;\r\n            let finishedCourse = true;\r\n            \r\n            let courseEligible = false;\r\n            \r\n            // The TA is eligible for this course if their grade for this course is A- or higher, or they took a qualifying course with a grade of -A or higher\r\n            // So, we loop over all of the courses that the TA has been to (no matter if they have taken it or are taking it)\r\n            for (let k = 0; k < curTACourses.length; k++){\r\n                let takenCourse = curTACourses[k];\r\n                let takenCourseNumber = takenCourse.courseNumber;\r\n\r\n                let gradeEligible = (takenCourse.grade === 'A-' || takenCourse.grade === 'A' || takenCourse.grade === 'A+')\r\n\r\n                // if TA is currently taking the course, they aren't eligible\r\n                if (takenCourse.semester === semester && takenCourse.year === year){\r\n                    finishedCourse = false;\r\n                    continue;\r\n                }\r\n\r\n                let hasTakenClass = takenCourseNumber === curCrse\r\n\r\n                // TA has taken this course in a previous semester, not current one \r\n                if (hasTakenClass && gradeEligible){\r\n                    courseEligible = true;\r\n                    continue;\r\n                }\r\n                \r\n                let hasTakenQualifiedClass = qualifiedCourses && QUALIFIED_COURSES[curCrse].includes(Number(takenCourseNumber))\r\n\r\n                // If the TA has taken a qualifying course in a previous semester\r\n                if (hasTakenQualifiedClass && gradeEligible){\r\n                    courseEligible = true;\r\n                    continue;\r\n                }\r\n\r\n                // If we get here, then \"gradeEligible\" should be false\r\n                // So, we run one more check for a course match and a qualifying course match before sending a conflict reason\r\n                if (hasTakenClass) {\r\n                    pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, `Low grade (${takenCourse.grade}) in course (COMP ${curCrse})`);\r\n                    continue;\r\n                }\r\n                if (hasTakenQualifiedClass) {\r\n                    pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, `Low grade (${takenCourse.grade}) in course (COMP ${curCrse})`)\r\n                    continue;\r\n                }\r\n\r\n                // If we get here, then the TA hasn't taken the matched course, nor any qualifying course\r\n                if (!qualifiedCourses) {\r\n                    pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, `COMP ${curCrse} not taken`);\r\n                    continue;\r\n                }\r\n                \r\n                let unmatchedClassesReason = `COMP`\r\n                for (let index = 0; index < qualifiedCourses.length; index++) {\r\n                    let qualifedCourse = qualifiedCourses[index]\r\n                    if (index - 1 === qualifiedCourses.length) {\r\n                        unmatchedClassesReason += `, and ${qualifedCourse} not taken`\r\n                    }\r\n                    \r\n                    unmatchedClassesReason += `, ${qualifedCourse}`\r\n                }\r\n                pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, unmatchedClassesReason);\r\n            }\r\n\r\n            if (courseEligible === true){ // if TA has taken the class or taken an eligible class\r\n                for (let x = 0; x < curTACourses.length; x++){ // iterate through each class the TA has taken\r\n                    const takingCourse = curTACourses[x];\r\n\r\n                    const daysOfTakingCourse = curTACourses[x].days\r\n\r\n                    if (takingCourse.semester === semester && takingCourse.year === year){ // if class that is being checked is happening this semester\r\n\r\n                        if (inClassNeeded == \"Y\\r\"){ //if current class requires TA to be present\r\n                            if (daysOfTakingCourse.includes(curClassDays) || curClassDays.includes(daysOfTakingCourse)){ // if current TA class and class happen on same days\r\n                                //console.log(daysOfTakingCourse, curClassDays);\r\n\r\n                                if (takingCourse.startTime != ''){\r\n                                \r\n                                    const class_TA_taking_start_time = parseInt(takingCourse.startTime); //start time of class that TA is taking current semester\r\n\r\n                                    const class_TA_taking_end_time = parseInt(takingCourse.stopTime); //stop time of class that TA is taking current semester\r\n                                    // check if current class and class that the TA is taking is overlapping in time at all\r\n                                    if ((curStartTime - class_TA_taking_start_time >= 0 && curStartTime - class_TA_taking_end_time <= 0) || (curEndTime - class_TA_taking_start_time >= 0 && curEndTime - class_TA_taking_end_time <= 0)){\r\n                                        timeEligible = false;\r\n                                    }\r\n                                    else if ((class_TA_taking_start_time - curStartTime >= 0 && class_TA_taking_start_time - curEndTime <= 0) || (class_TA_taking_end_time - curStartTime >= 0 && class_TA_taking_end_time - curEndTime <= 0)){\r\n                                        timeEligible = false;\r\n                                    }\r\n                                }\r\n                            }\r\n                        } \r\n                        else { // if TA does not need to be in class, they are timeEligible\r\n                            timeEligible = true;\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (timeEligible === false) {\r\n                pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, \"Doesn't have the time required to TA for this course\");\r\n                continue;\r\n            }\r\n            \r\n            // At this point, the TA is time eligible, and has taken the class or taken an eligible class with a high enough grade\r\n\r\n            // Since \"timeEligible\" defaults to true, if \"courseEligible\" is false, the above if statement will be skipped\r\n            // \"timeEligible\" should not default to false (the if statement below should not be removed) since a failed eligiblity check will improperly enter the above if statement\r\n            // Instead, an error ineligibly reason is given at the end of the loop\r\n            if (courseEligible === true){ \r\n                pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, true, \"not applicable; TA is eligible\");\r\n                continue;\r\n            }\r\n\r\n            // As stated above, if we get here, we don't know what happened\r\n            pushClassList(class_list, curTAID, curCRN, curCrse, taHours, enrollment, false, \"TA is not eligible for an unknown reason?\");\r\n        }\r\n    }\r\n\r\n    console.log(class_list);\r\n\r\n    setClassList(class_list);\r\n\r\n\r\n}\r\n\r\nuseEffect(() => {\r\n    handleEligibilityList();\r\n    setRunAlg(true)\r\n  }, []);\r\n\r\n\r\n  return null;\r\n\r\n}\r\n\r\nexport default CreateEligList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}